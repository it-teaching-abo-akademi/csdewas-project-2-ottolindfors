{"version":3,"sources":["api.js","myFunctions.js","AddPortfolioModal.js","EvolutionGraph.js","PortfolioTableRow.js","PortfolioTable.js","AddStockModal.js","Portfolio.js","dataFunctions.js","App.js","index.js"],"names":["TOKEN","BASE_URL","BASE_URL_DATE","urlBuilder","stockSymbols","type","chartRange","url","i","length","includes","ran","builder","urlBuilderDate","stockSymbol","yyyymmdd","builderDate","dateToChartRange","isoPurchaseDate","purchaseDate","Date","todayDate","dayDiff","Math","ceil","janFirst","toISOString","slice","ytdDiff","rangeOptionsString","rangeOptionsInt","cont","compareFunctionWName","a","b","name","loadFromLocalStorage","objName","data","JSON","parse","localStorage","getItem","Error","loader","saveToLocalStorage","obj","setItem","stringify","console","log","saver","AddPortfolioModal","props","state","newPortfolioName","inputError","submitError","handleOnSubmit","bind","handleOnChange","handleOnCancel","event","preventDefault","portfolios","this","setState","onAdd","target","value","onCancel","show","onSubmit","onChange","required","onClick","React","Component","EvolutionGraph","random","toFixed","toString","graphRange","days","replace","dateToday","setDate","getDate","months","setMonth","getMonth","years","setFullYear","getFullYear","stocks","showInEuro","euroPerUsd","datesInData","stockNames","graphRangeLimitDate","graphRangeToDate","stock","hasOwnProperty","push","chart","chartKey","close","Number","date","idx","indexOf","dataEntry","sort","aspect","width","height","strokeDasharray","dataKey","map","stockName","key","stroke","generateHslColor","activeDot","r","dot","PureComponent","PortfolioTableRow","handleCheckedChange","onRowCheckedChange","stockData","stockInfo","isChecked","latestPrice","quote","shares","purchase","purchasePrice","price","purchaseCurrency","currency","checked","PortfolioTable","selectedRows","handleRowCheckedChange","handleOnClick","onRemoveSelected","rows","Object","keys","AddStockModal","hasErrors","errorMessage","loading","handleOnsubmit","handleCancel","puchasePriceFetcher","then","fetchedPrice","toUpperCase","stockError","dateError","min","isoDate","apiUrl","fetch","response","ok","json","status","jsonData","catch","error","message","rangeOptions","text","Portfolio","showAddStockModal","handleToggleShowInEuro","handleOnUpdate","handleOnGraphRangeChange","handleToggleShowAddStockModal","handleAddStock","handleOnRemoveSelected","handleRemovePortfolio","onToggleShowInEuro","onUpdate","onGraphRangeChange","onAddStock","onRemovePortfolio","portfolio","userPrefs","isUpdating","defaultValue","entry","minimizeDataStocksOnly","appData","portfolioName","chartData","DEFAULT_USER_PREFS","App","showAddPortfolioModal","toggleShowAddPortfolioModal","handleAddPortfolio","handleRemoveSelected","handleOnRemovePortfolio","dataFetcher","minimizeData","selectedGraphRange","entries","className","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.083342e7.chunk.js","sourcesContent":["const TOKEN = 'Tpk_564e31a7cc054b8c87a93c668202adce';\nconst BASE_URL = 'https://sandbox.iexapis.com/stable/stock/market/batch?';\nconst BASE_URL_DATE = 'https://sandbox.iexapis.com/stable/stock/';\n\nfunction builder(stockSymbols, type, chartRange) {\n    /*\n    Builds the url for fetching stock data from api.\n    - symbolsArr is an array of stock symbols as strings.\n    - range is the timespan as string that should be fetched (1d, 5d, 1m, ...).\n    - type is 'quote' or 'chart'\n     */\n    let url = BASE_URL;\n    const sym = 'symbols=';\n    const typ = '&types=';\n    const ran = '&range=';\n    const fallbackRange = '1y';\n    const tok = '&token=';\n\n    // Append symbols to the url\n    url += sym;\n    for (let i=0; i<stockSymbols.length; i++) {\n        url += stockSymbols[i];\n        // Append ',' after symbol except after last one\n        if (i < stockSymbols.length - 1) {\n            url += ',';\n        }\n    }\n    // Append types to the url\n    url += typ + type;\n    // Append range to the url\n    if (type.includes('chart')) {\n        if (chartRange) { url += ran + chartRange }\n        else { url += ran + fallbackRange }  // Use fallbackRange if no range was provided\n    }\n    // Append token to the url\n    url += tok + TOKEN;\n\n    return url;\n}\n\nfunction builderDate(stockSymbol, yyyymmdd) {\n    /*\n    Builds an url for fetching stock price at a specific date.\n     */\n    let url = BASE_URL_DATE;\n\n    url += stockSymbol;\n    url += '/chart/date/';\n    url += yyyymmdd;\n    url += '?chartByDay=true&token=';\n    url += TOKEN;\n\n    return(url)\n}\n\nexport const urlBuilder = (stockSymbols, type, chartRange) => {\n  return builder(stockSymbols, type, chartRange);\n};\n\nexport const urlBuilderDate = (stockSymbol, yyyymmdd) => {\n    return builderDate(stockSymbol, yyyymmdd);\n};\n","function loader(objName) {\n    /*\n    Loads an JSON object from local storage. Throws error if not found (data=null)\n     */\n    let data = JSON.parse(localStorage.getItem(objName));\n    // Check if null\n    if (!data) {\n        throw new Error(\"Did not find '\" + objName + \"' in local storage\");\n    }\n    return data;\n}\n\nfunction saver(obj, objName) {\n    /*\n    Saves an JSON object to local storage.\n     */\n    localStorage.setItem(objName, JSON.stringify(obj));\n    console.log(\"==> Saved to local storage '\" + objName + \"'\");\n}\n\nexport function dateToChartRange(isoPurchaseDate) {\n    const purchaseDate = new Date(isoPurchaseDate);\n    const todayDate = new Date();\n    // dayDiff = number of days since purchase date\n    const dayDiff = Math.ceil((todayDate - purchaseDate) / (1000 * 60 * 60 * 24));  // Ceil ensures enough days\n    const janFirst = new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n    // ytdDiff = number of days since january 1 this year\n    const ytdDiff = Math.ceil((todayDate - janFirst) / (1000 * 60 * 60 * 24));  // Days since Jan 1 (at most 365)\n\n    // graph range options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n    let rangeOptionsString = [\"5d\", \"1m\", \"3m\", \"6m\", \"1y\", \"2y\", \"5y\"];  // options the API accept\n    let rangeOptionsInt = [5, 32, 94, 168, 367, 732, 1828];  // options used for finding the correct range\n    let chartRange = \"\";\n\n    // Find the smallest range option that is larger than dayDiff\n    let i = 0;\n    let cont = true;\n    while(cont) {\n        if (dayDiff <= rangeOptionsInt[i]) {\n            // days since purchase is less than the current range option, i.e. chartRange=rangeOptionsInt[i] is a valid choice\n            if (ytdDiff >= dayDiff && ytdDiff <= rangeOptionsInt[i]) {\n                // When possible prefer ytd over fixed range rangeOptionsInt[i]\n                chartRange = \"ytd\";\n            } else {\n                // The API requires rangeOptionsString[i] instead of rangeOptionsInt[i]\n                chartRange = rangeOptionsString[i];\n            }\n            // Stop searching\n            cont = false;\n        } else {\n            // days since purchase is more than the current range option\n            if (i === rangeOptionsInt.length) {\n                // The range options are not enough. A greater range is needed\n                chartRange = \"max\";\n                // Stop searching\n                cont = false;\n            }\n        }\n        // continue to next element in rangeOptionsInt and rangeOptionsString\n        i++;\n    }\n\n    return chartRange;\n}\n\nexport function compareFunctionWName(a, b) {\n    if (a.name < b.name) {return -1}\n    if (a.name > b.name) {return 1}\n    return 0;\n}\n\nexport function compareFunctionWDate(a, b) {\n    if (a.date < b.date) {return -1}\n    if (a.date > b.date) {return 1}\n    return 0;\n}\n\nexport const loadFromLocalStorage = (objName) => {\n  return loader(objName);\n};\n\nexport const saveToLocalStorage = (obj, objName) => {\n    return saver(obj, objName);\n};","import React from \"react\";\n\nexport class AddPortfolioModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        };\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleOnCancel = this.handleOnCancel.bind(this);\n    }\n    handleOnSubmit(event) {\n        event.preventDefault();\n        // Validate that the name is unique set state and submit\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = this.state.newPortfolioName;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({ submitError: \"Pick another name for your portfolio\" })\n        }\n        else {\n            // Reset state\n            this.setState({\n                newPortfolioName: \"\",\n                submitError: \"\"\n            });\n            // Pass newPortfolioName to parent\n            this.props.onAdd(newPortfolioName);\n        }\n    }\n    handleOnChange(event) {\n        // Validate that the name is unique and set state\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = event.target.value;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"You have another portfolio with this name\"\n            })\n        }\n        else {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"\",\n                submitError: \"\"\n            })\n        }\n    }\n    handleOnCancel() {\n        this.setState({\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        });\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            // Should render nothing in the future\n            return null;\n        }\n        return (\n            <div>\n                <h2>Add a new portfolio</h2>\n                <form onSubmit={this.handleOnSubmit}>\n                    <label>\n                        Portfolio name\n                        <input type=\"text\" value={this.state.newPortfolioName} onChange={this.handleOnChange} required/>\n                    </label>\n                    <p>{this.state.inputError}</p>\n                    <p>{this.state.submitError}</p>\n                    <input type=\"submit\" value=\"Add\" />\n                    <button onClick={this.handleOnCancel}>Cancel</button>\n                </form>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line, ResponsiveContainer} from \"recharts\";\nimport {compareFunctionWName} from \"./myFunctions\";\n\nexport class EvolutionGraph extends React.PureComponent{\n\n    // Move these two functions to myfunctions.js\n    generateHslColor() {\n        // Generate random hsl color. Ensures the color is visible on the chart\n        const hue = (Math.random() * 360).toFixed(0).toString();\n        const saturation = \"40%\";\n        const lightness = \"70%\";\n        return \"hsl(\" + hue + \",\" + saturation + \",\" + lightness + \")\";\n    }\n    graphRangeToDate(graphRange) {\n        // graphRange options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n        if (graphRange.includes(\"d\") && !graphRange.includes(\"ytd\")) {\n            const days = graphRange.replace(\"d\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'days' number of days in the past and return the new date\n            return new Date(new Date().setDate(dateToday.getDate() - days));\n        }\n        if (graphRange.includes(\"m\") && !graphRange.includes(\"max\")) {\n            const months = graphRange.replace(\"m\", \"\");  // 1m, 3m, 6m\n            const dateToday = new Date();\n            // Set the date to 'months' number of months in the past and return the new date\n            return new Date(new Date().setMonth(dateToday.getMonth() - months));\n        }\n        if (graphRange.includes(\"ytd\")) {\n            // Return a Date object set to 1 Jan of the current year\n            return new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n        }\n        if (graphRange.includes(\"y\") && !graphRange.includes(\"ytd\")) {\n            const years = graphRange.replace(\"y\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'years' number of years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n        if (graphRange.includes(\"max\")) {\n            const years = 15;  // iexcloud provides 15 years of data at maximum\n            const dateToday = new Date();\n            // Set the date 500 years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const graphRange = this.props.graphRange;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        const data = [];\n        let datesInData = [];\n        let stockNames = [];\n\n        // Translate 'graphRange' to number of days\n        const graphRangeLimitDate = this.graphRangeToDate(graphRange);\n\n        // Populate 'data' and 'stockNames' with data in the correct format for the LineChart component\n        for (let stock in stocks) {  // stocks = {aapl: {...}, fb: {...}, ...}\n            if (stocks.hasOwnProperty(stock)) {\n                stockNames.push(stock);\n\n                const chart = stocks[stock].chart;\n                for (let chartKey in chart) {  // chart = {0: {date: --, close: --}, 1: {date: --, close: --}, ...}\n                    if (chart.hasOwnProperty(chartKey)) {\n                        // Close value in correct currency\n                        let close = 0;\n                        if (showInEuro) {\n                            close = Number((chart[chartKey].close * euroPerUsd).toFixed(2));  // .toFixed(2) without casting to Number causes the chart to scale incorrectly (if there are problems in the future).\n                        }\n                        else {\n                            close = chart[chartKey].close\n                        }\n\n                        // Date\n                        const date = chart[chartKey].date;\n\n                        // Filter the dates for the graph (LineChart)\n                        if (new Date(date) >= graphRangeLimitDate) {\n                            // Check if date exist in data\n                            if(!datesInData.includes(date)) {\n                                // Keeping track of what dates are already in data. Easier and faster this way than iterating data\n                                datesInData.push(date);\n\n                                // Create new entry in data. Add first stock's close value\n                                const dataEntry = {};\n                                dataEntry[\"name\"] = date;\n                                dataEntry[stock] = close;  // { name: \"2019-12-16\", FB: 205.12 }\n                                data.push(dataEntry);  // [{ name: \"2019-12-16\", FB: 205.12 }, ...]\n                            }\n                            else {\n                                // The date does already exist in data.\n                                // Add the stocks value to an already existing entry.\n\n                                // data is an array so the values/entries have fixed order.\n                                // the values/entries in data has the exact same order as the dates in datesInData\n                                // (this is because they are added by the above if statement)\n                                const idx = datesInData.indexOf(date);\n                                let dataEntry = data[idx];\n                                dataEntry[stock] = close;\n                                data[idx] = dataEntry;  // keeps the order intact\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort data. Recharts assumes the data is ordered.\n        data.sort(compareFunctionWName);\n\n        return (\n            // Responsive container makes the chart adapt to the sise of the parent container\n            // margin={{top:5, right: 30, left: 20, bottom: 5}}\n            // use type=\"monotone\" in Line to make the graph smooth\n            <div>\n                <ResponsiveContainer aspect={1.7} width={500}>\n                    <LineChart width=\"100%\" height=\"100%\" data={data}>\n                        <CartesianGrid strokeDasharray=\"1 3\"/>\n                        <XAxis dataKey=\"name\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend/>\n                        {stockNames.map(stockName =>\n                            <Line\n                                key={stockName}\n\n                                dataKey={stockName}\n                                stroke={this.generateHslColor()}\n                                activeDot={{ r: 4 }}\n                                dot={false}\n                            />\n                            )\n                        }\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n}","import React from \"react\";\nexport class PortfolioTableRow extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleCheckedChange = this.handleCheckedChange.bind(this);\n    }\n\n    handleCheckedChange(event) {\n        this.props.onRowCheckedChange(event);  // e.target.checked, e.target.name checked = true/false, name = AAPL , FB,...\n    }\n\n    render() {\n        const stock = this.props.stock;\n        const stockData = this.props.stockInfo;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n        const isChecked = this.props.isChecked;\n\n        const latestPrice = stockData.quote.latestPrice;\n        const shares = stockData.purchase.shares;\n        const purchasePrice = stockData.purchase.price;\n        const purchaseCurrency = stockData.purchase.currency;\n\n        // See Thinking in react for handling the input button\n        return (\n            <tr>\n                <td>{stock}</td>\n                <td>{showInEuro ? (latestPrice * euroPerUsd).toFixed(2) + \" EUR\" : latestPrice + \" USD\"}</td>\n                <td>{purchasePrice} {purchaseCurrency}</td>\n                <td>{shares}</td>\n                <td>{showInEuro ? (latestPrice * shares * euroPerUsd).toFixed(2) + \" EUR\" : (latestPrice * shares).toFixed(2) + \" USD\"}</td>\n                <td><input name={stock} type=\"checkbox\" checked={isChecked} onChange={this.handleCheckedChange}/></td>\n            </tr>\n        );\n    }\n}","import React from \"react\";\nimport {PortfolioTableRow} from \"./PortfolioTableRow\";\n\nexport class PortfolioTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // *******************************************************\n            // NOTE: This is a derived state and should not be used.\n            // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n            // Atm i will continue with this and review it later.\n            //\n            // Checking the number of keys in the object in selectedRows\n            // when rendering temporarily fixes the problem of the state not\n            // being set at the initial render.\n            // *******************************************************\n            selectedRows: [],  // [AAPL: true, FB: false, TWTR: true, ...]\n        };\n        this.handleRowCheckedChange = this.handleRowCheckedChange.bind(this);\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    componentDidMount() {\n        // Populate initial state after component mount. Set all rows not checked.\n        const stocks = this.props.stocks;\n        let selectedRows = [];\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                selectedRows[stock] = false;\n            }\n        }\n        this.setState({ selectedRows: selectedRows });\n    }\n\n    handleRowCheckedChange(event) {\n        // Extract stock name and whether the <input ... /> is checked\n        const stock = event.target.name;  // event.target is the <input ... /> element in PortfolioTableRow\n        const isChecked = event.target.checked;\n\n        // Update the state\n        let selectedRows = this.state.selectedRows;\n        selectedRows[stock] = isChecked;\n        this.setState({ selectedRows: selectedRows });\n    }\n    handleOnClick() {\n        this.props.onRemoveSelected(this.state.selectedRows);\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        const selectedRows = this.state.selectedRows;\n\n        let rows = [];\n        for (let stockSymbol in stocks) {\n            if (stocks.hasOwnProperty(stockSymbol)) {\n                rows.push(\n                    <PortfolioTableRow\n                        key={stockSymbol}\n                        stock={stockSymbol}\n                        stockInfo={stocks[stockSymbol]}\n                        showInEuro={showInEuro}\n                        euroPerUsd={euroPerUsd}\n                        isChecked={Object.keys(selectedRows).length === 0 ? false : selectedRows[stockSymbol]}\n                        onRowCheckedChange={this.handleRowCheckedChange}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div>\n                <button\n                    onClick={this.handleOnClick}>\n                    Remove selected\n                </button>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Stock</th>\n                        <th>Latest Price</th>\n                        <th>Purchase Price</th>\n                        <th>Shares</th>\n                        <th>Total</th>\n                        <th>Select</th>\n                    </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {urlBuilderDate} from \"./api\";\n\nexport class AddStockModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            shares: \"\",\n            hasErrors: false,\n            errorMessage: \"\",\n            loading: false,\n        };\n        this.handleOnsubmit = this.handleOnsubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    handleOnsubmit(event) {\n        event.preventDefault();\n\n        const stockSymbol = this.state.stockSymbol;\n        const purchaseDate = this.state.purchaseDate;\n        const shares = this.state.shares;\n\n        let purchasePrice = null;\n        this.setState(\n            { loading: true },\n            () => {\n                // Fetch purchase price from API\n                let puchasePriceFetcher = this.puchasePriceFetcher(stockSymbol, purchaseDate);  // Returns a promise\n                puchasePriceFetcher.then(fetchedPrice => {\n                    if (!this.state.hasErrors) {\n                        purchasePrice = fetchedPrice;\n                        this.props.onAdd(stockSymbol, purchaseDate, purchasePrice, shares);\n                    }\n                    this.setState({\n                        hasErrors: false,\n                        loading: false,\n                    });\n                })\n                // Errors are already caught in purchasePriceFetcher so no need to do it here\n            }\n        );\n\n    }\n    handleOnChange(event) {\n        if (event.target.name === \"stockSymbol\") {\n            this.setState({ stockSymbol: event.target.value.toUpperCase() });\n        }\n        if (event.target.name === \"purchaseDate\") {\n            this.setState({ purchaseDate: event.target.value })\n        }\n        if (event.target.name === \"shares\") {\n            this.setState({ shares: event.target.value })\n        }\n    }\n    handleCancel() {\n        // Reset state\n        this.setState({\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            stockError: \"\",\n            dateError: \"\",\n        });\n        // Action\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        if (this.state.loading) {\n            // Loading while fetching data\n            return (\n                <p>Loading ...</p>\n            )\n        }\n        return (\n            <div>\n                <h3>Add stock</h3>\n                <form onSubmit={this.handleOnsubmit}>\n                    <label>\n                        Stock symbol\n                        <input type=\"text\" name=\"stockSymbol\" value={this.state.stockSymbol} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Date of purchase\n                        <input type=\"date\" name=\"purchaseDate\" value={this.state.purchaseDate} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Number of shares\n                        <input type=\"number\" min=\"1\" name=\"shares\" value={this.state.shares} onChange={this.handleOnChange} required/>\n                    </label>\n                    <input type=\"submit\" value=\"Add\"/>\n                </form>\n                <p>{this.state.errorMessage}</p>\n                <button onClick={this.handleCancel}>Cancel</button>\n            </div>\n        )\n    }\n    puchasePriceFetcher(stockSymbol, isoDate) {\n        // isoDate should be of format YYYY-MM-DD as returned by the <input type=\"date />\n        const yyyymmdd = isoDate.replace(/-/g, \"\");\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    // API returns an empty json if the stock symbol is valid but there is no available data.\n                    return response.json()  // returns 'undefined' if json from api is empty\n                }\n                if (response.status === 404) {\n                    // API throws 404 if stock symbol is unknown\n                    throw new Error(\"Unknown stock symbol\");\n                }\n                else {\n                    // All other errors\n                    throw new Error(\"Error while fetching from api ...\");\n                }\n            })\n            .then(jsonData => {\n                // The API returns an empty json if the stock symbol is valid but there is no available data.\n                if (jsonData.length > 0) {\n                    return jsonData[0].close;\n                }\n                else {\n                    throw new Error(\"No available stock data for that date. Either the exchange was closed that day (e.g. weekend) or the date is too far in the past.\");\n                }\n            })\n            .catch(error => {\n                // Handle errors\n                console.log(\"==>\", error.message);\n                this.setState({\n                    hasErrors: true,\n                    errorMessage : error.message\n                });\n            })\n    }\n}","import React from \"react\";\nimport {EvolutionGraph} from \"./EvolutionGraph\";\nimport {PortfolioTable} from \"./PortfolioTable\";\nimport {AddStockModal} from \"./AddStockModal\";\n\nconst rangeOptions = [\n    {value: \"5d\", text: \"5 days\",},\n    {value: \"1m\", text: \"1 month\"},\n    {value: \"3m\", text: \"3 months\"},\n    {value: \"6m\", text: \"6 months\"},\n    {value: \"ytd\", text: \"This year\"},\n    {value: \"1y\", text: \"1 year\"},\n    {value: \"2y\", text: \"2 years\"},\n    {value: \"5y\", text: \"5 years\"},\n    {value: \"max\", text: \"Maximum available\"}\n];\nconst euroPerUsd = 0.90;  // Later change this to API call\n\nexport class Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAddStockModal: false,\n        };\n        this.handleToggleShowInEuro = this.handleToggleShowInEuro.bind(this);\n        this.handleOnUpdate = this.handleOnUpdate.bind(this);\n        this.handleOnGraphRangeChange = this.handleOnGraphRangeChange.bind(this);\n        this.handleToggleShowAddStockModal = this.handleToggleShowAddStockModal.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n        this.handleOnRemoveSelected = this.handleOnRemoveSelected.bind(this);\n        this.handleRemovePortfolio = this.handleRemovePortfolio.bind(this);\n    }\n    handleToggleShowInEuro(event) {\n        this.props.onToggleShowInEuro(event);\n    }\n    handleOnUpdate(event) {\n        // Send portfolio's name to the parent function\n        this.props.onUpdate(event.target.name);\n    }\n    handleOnGraphRangeChange(event) {\n        // Pas portfolio name and the selected range to the parent\n        this.props.onGraphRangeChange(this.props.name, event.target.value);\n    }\n    handleToggleShowAddStockModal() {\n        this.setState({ showAddStockModal: !this.state.showAddStockModal });\n    }\n    handleAddStock(stockSymbol, purchaseDate, purchasePrice, shares) {\n        this.handleToggleShowAddStockModal();\n        this.props.onAddStock(this.props.name, stockSymbol, purchaseDate, purchasePrice, shares);\n    }\n    handleOnRemoveSelected(selectedRows) {\n        this.props.onRemoveSelected(this.props.name, selectedRows);\n    }\n    handleRemovePortfolio() {\n        this.props.onRemovePortfolio(this.props.name)\n    }\n\n    render() {\n        // Prevent errors when initial (and maybe also other asynchronous) render happen before userPrefs and name are set in appData.\n        if (typeof this.props.name === 'undefined' ||\n            typeof this.props.portfolio === 'undefined' ||\n            typeof this.props.portfolio.userPrefs === 'undefined'\n        ) {\n            return <p>Loading ...</p>\n        }\n        // Props\n        const name = this.props.name;\n        const portfolio = this.props.portfolio;\n        const isUpdating = this.props.isUpdating;\n        // \"Refined\" props\n        const stocks = portfolio.stocks;\n        const showInEuro = portfolio.userPrefs.showInEuro;\n        const graphRange = portfolio.userPrefs.graphRange;\n\n\n        // For handling button press read https://reactjs.org/docs/handling-events.html\n\n        return (\n            <div>\n                <h2>{name}</h2>\n                <button\n                    name={name}\n                    onClick={this.handleToggleShowInEuro}>\n                    {showInEuro ? \"USD\" : \"EUR\" }\n                </button>\n                <button\n                    name={name}\n                    onClick={this.handleOnUpdate}>\n                    {isUpdating ? \"Fetching ...\" : \"Update\"}\n                </button>\n                <div>\n                    <EvolutionGraph\n                        stocks={stocks}\n                        graphRange={graphRange}\n                        showInEuro={showInEuro}\n                        euroPerUsd={euroPerUsd}\n                    />\n                    <select defaultValue={graphRange} onChange={this.handleOnGraphRangeChange}>\n                        {rangeOptions.map(entry => {\n                            return <option\n                                key={entry.value}\n                                value={entry.value}>\n                                {entry.value}\n                            </option>\n                        })}\n                    </select>\n                </div>\n                <button\n                    onClick={this.handleToggleShowAddStockModal}>\n                    Add stock\n                </button>\n                <AddStockModal\n                    show={this.state.showAddStockModal}\n                    onCancel={this.handleToggleShowAddStockModal}\n                    onAdd={this.handleAddStock}>\n                    \"I am a child of this modal\"\n                </AddStockModal>\n                <PortfolioTable\n                    stocks={stocks}\n                    showInEuro={showInEuro}\n                    euroPerUsd={euroPerUsd}\n                    onRemoveSelected={this.handleOnRemoveSelected}\n                />\n                <button\n                    onClick={this.handleRemovePortfolio}>\n                    Remove portfolio\n                </button>\n            </div>\n        );\n    }\n}","// TODO: reuse code\n\nexport function minimizeData(stockData, appData, portfolioName, purchaseDate, purchasePrice, shares) {\n    // Clean data fetched from API for a smaller storage footprint\n\n    const stockSymbol = Object.keys(stockData)[0];\n\n    // Get only the necessary quote data\n    let quote = {};\n    quote[\"companyName\"] = stockData[stockSymbol].quote[\"companyName\"];\n    quote[\"latestPrice\"] = stockData[stockSymbol].quote[\"latestPrice\"];\n\n    // Get only the necessary chart data\n    let chart = {};\n    const chartData = stockData[stockSymbol].chart;\n    for (let key in chartData) {\n        if (chartData.hasOwnProperty(key)) {\n            chart[key] = {\"date\": chartData[key].date, \"close\": chartData[key].close};\n        }\n    }\n\n    // Purchase info\n    const purchase = {date: purchaseDate, price: purchasePrice, shares: shares, currency: \"USD\"};  // default currency \"USD\"\n\n    // Add quote, chart and purchase to existing portfolio\n    appData[portfolioName].stocks[stockSymbol] = {\"quote\": quote, \"chart\": chart, \"purchase\": purchase};\n\n    return appData;\n}\n\nexport function minimizeDataStocksOnly(stockData, appData, portfolioName) {\n    // Clean data fetched from API for a smaller storage footprint\n    // Does not manipulate purchase date\n\n    const stockSymbol = Object.keys(stockData)[0];\n\n    // Get only the necessary quote data\n    let quote = {};\n    quote[\"companyName\"] = stockData[stockSymbol].quote[\"companyName\"];\n    quote[\"latestPrice\"] = stockData[stockSymbol].quote[\"latestPrice\"];\n\n    // Get only the necessary chart data\n    let chart = {};\n    const chartData = stockData[stockSymbol].chart;\n    for (let key in chartData) {\n        if (chartData.hasOwnProperty(key)) {\n            chart[key] = {\"date\": chartData[key].date, \"close\": chartData[key].close};\n        }\n    }\n\n    // Add quote, chart and purchase to existing portfolio\n    appData[portfolioName].stocks[stockSymbol][\"quote\"] = quote;\n    appData[portfolioName].stocks[stockSymbol][\"chart\"] = chart;\n\n    return appData;\n}","import React from 'react';\nimport './App.css';\nimport {urlBuilder, urlBuilderDate} from \"./api\";\nimport {dateToChartRange, loadFromLocalStorage, saveToLocalStorage} from \"./myFunctions\";\nimport {AddPortfolioModal} from './AddPortfolioModal'\nimport {Portfolio} from \"./Portfolio\";\nimport {minimizeData, minimizeDataStocksOnly} from \"./dataFunctions\";\n\n// TODO: Reuse code segments\n\nconst LOCALSTORAGE_APPDATA_NAME = 'appData';\nconst DEFAULT_USER_PREFS = {showInEuro: false, graphRange: \"6m\"};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appData: {},  // All data\n            showAddPortfolioModal: false,\n            loading: false,\n            isUpdating: false,\n        };\n        this.toggleShowAddPortfolioModal = this.toggleShowAddPortfolioModal.bind(this);\n        this.handleAddPortfolio = this.handleAddPortfolio.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n        this.handleOnUpdate = this.handleOnUpdate.bind(this);\n        this.handleOnGraphRangeChange = this.handleOnGraphRangeChange.bind(this);\n        this.handleToggleShowInEuro = this.handleToggleShowInEuro.bind(this);\n        this.handleRemoveSelected = this.handleRemoveSelected.bind(this);\n        this.handleOnRemovePortfolio = this.handleOnRemovePortfolio.bind(this);\n    }\n\n    // Move these two functions to myFunctions.js\n    // Fetches latest quote and/or chart (historic data) for all stockSymbols\n    dataFetcher(stockSymbols, type, chartRange) {\n        const apiUrl = urlBuilder(stockSymbols, type, chartRange);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                return jsonData;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n    puchasePriceFetcher(stockSymbol, yyyymmdd) {\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                return jsonData[0].close;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    componentDidMount() {\n        /*\n        FIRST TRY LOADING DATA FROM LOCAL STORAGE.\n        IF THERE IS NOTHING IN LOCAL STORAGE THEN LOAD FROM INTERNET (BUT ONLY ON USER INPUT REFRESH/GET/ADD BUTTON)\n         */\n        console.log(\"==> componentDidLoad\");\n        // Load array of portfolio names and all app data from local storage. Throws error if not found and fails silently outputting error only to console.\n        try {\n            const appData = loadFromLocalStorage(LOCALSTORAGE_APPDATA_NAME);  // Trows error if not found\n            this.setState(\n                { appData: appData },\n                () => console.log(\"==> Loaded 'portfolios' and 'appData' from local storage\")\n            );\n        }\n        catch (error) {\n            // Silently fail\n            console.log(\"==>\", error);\n        }\n    }\n\n    toggleShowAddPortfolioModal() {\n        this.setState({ showAddPortfolioModal: !this.state.showAddPortfolioModal });\n    };\n    handleAddPortfolio(newPortfolioName) {\n        // Hide the modal\n        this.toggleShowAddPortfolioModal();\n        // Create new portfolio with no stocks default user preferences.\n        let appData = this.state.appData;\n        appData[newPortfolioName] = {\"userPrefs\": DEFAULT_USER_PREFS};\n        appData[newPortfolioName][\"stocks\"] = {};\n        this.setState(\n            {appData: appData},\n            () => {\n                console.log(\"==> Created new portfolio '\" + newPortfolioName + \"'\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    handleAddStock(portfolioName, stockSymbol, purchaseDate, purchasePrice, shares) {\n        // Add a new stock to the portfolio in appData and save to local storage.\n        console.log(\"==> Adding stock to\", portfolioName, stockSymbol, purchaseDate, purchasePrice, shares);\n\n        // Calculate the needed chartRange\n        const chartRange = dateToChartRange(purchaseDate);\n        console.log(\"DEBUG: chart range to fetch from API:\", chartRange);\n        // Fetch chart and quota data\n        const type = 'quote,chart';\n\n        let dataFetcher = this.dataFetcher([stockSymbol], type, chartRange);\n        dataFetcher.then(stockData => {\n            let appData = this.state.appData;\n            appData = minimizeData(\n                stockData,\n                appData,\n                portfolioName,\n                purchaseDate,\n                purchasePrice,\n                shares\n            );\n\n            // Set state and save to local storage\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> Stock data added to '\" + portfolioName + \"'\");\n                    saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                }\n            )\n        });\n    }\n    async handleOnUpdate(portfolioName) {\n        // Ad-hoc solution to use async-await here.\n        // The dataFetcher is asynchronous and therefore needs await.\n        // Since dataFetcher is inside a for loop the loop would not otherwise \"wait\" in the results (.then)\n\n        // Basically the same as handleAddStock\n        console.log(\"==> Updating '\" + portfolioName + \"'\");\n        this.setState({ isUpdating : true });\n\n        let appData = this.state.appData;\n\n        // Update one stock at a time since the purchase dates may wildly vary\n        let stocks = appData[portfolioName].stocks;\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                // Calculate the needed chartRange\n                const chartRange = dateToChartRange(stocks[stock].purchase.date);\n                // Fetch chart and quota data\n                const type = 'quote,chart';\n\n                // Fetch the new stock data\n                let dataFetcher = this.dataFetcher([stock], type, chartRange);\n                await dataFetcher.then(stockData => {\n                    appData = minimizeDataStocksOnly(\n                        stockData,\n                        appData,\n                        portfolioName\n                    );\n                })\n            }\n        }\n\n        // Set state and save to local storage\n        this.setState(\n            { appData: appData, isUpdating: false},\n            () => {\n                console.log(\"==> Updated portfolio '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n    handleOnGraphRangeChange(portfolioName, selectedGraphRange) {\n        let appData = this.state.appData;\n        appData[portfolioName].userPrefs[\"graphRange\"] = selectedGraphRange;\n        this.setState(\n            { appData: appData },\n            () => saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME)\n        )\n    }\n    handleToggleShowInEuro(event) {\n        const portfolioName = event.target.name;\n        let appData = this.state.appData;\n        appData[portfolioName].userPrefs[\"showInEuro\"] = !appData[portfolioName].userPrefs[\"showInEuro\"];\n        this.setState(\n            { appData: appData },\n            () => saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME)\n            );\n    }\n    handleRemoveSelected(portfolioName, selectedRows) {\n        let appData = this.state.appData;\n        // Check which rows are marked for deletion\n        for (let [stockSymbol, booleanValue] of Object.entries(selectedRows)) {\n            if (booleanValue) {\n                // Delete stock entry\n                delete appData[portfolioName].stocks[stockSymbol]\n            }\n        }\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> Deleted selected stocks from '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n    handleOnRemovePortfolio(portfolioName) {\n        // Delete the portfolio\n        let appData = this.state.appData;\n        delete appData[portfolioName];\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> Deleted portfolio '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n\n    render() {\n        console.log(\"==> App render\");\n\n        // Get list of portfolios from appData\n        const appData = this.state.appData;\n        let portfolios = [];\n        for (let portfolioName in appData) {\n            if (appData.hasOwnProperty(portfolioName)) {\n                portfolios.push(portfolioName);\n            }\n        }\n\n        // Render portfolios and 'add portfolio' button\n        return (\n            <div className=\"App\">\n                <h1>SPMS</h1>\n                <p><a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>. 15 minute delay in price.</p>\n                <p>This app is a work in progress.</p>\n                <p>Known issues: The graph does not update when a stock is added (manual refresh by user is needed).</p>\n                <button\n                    onClick={this.toggleShowAddPortfolioModal}>\n                    Add portfolio\n                </button>\n                <AddPortfolioModal\n                    show={this.state.showAddPortfolioModal}\n                    onCancel={this.toggleShowAddPortfolioModal}\n                    onAdd={this.handleAddPortfolio}\n                    portfolios={portfolios}>\n                    \"We are the children of this modal\"\n                </AddPortfolioModal>\n                {portfolios.map(portfolioName =>\n                    // Pass portfolio name and portfolio data to the portfolio\n                    <Portfolio\n                        key={portfolioName}\n                        name={portfolioName}\n                        portfolio={appData[portfolioName]}\n                        isUpdating={this.state.isUpdating}\n                        onToggleShowInEuro={this.handleToggleShowInEuro}\n                        onUpdate={this.handleOnUpdate}\n                        onGraphRangeChange={this.handleOnGraphRangeChange}\n                        onAddStock={this.handleAddStock}\n                        onRemoveSelected={this.handleRemoveSelected}\n                        onRemovePortfolio={this.handleOnRemovePortfolio}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}