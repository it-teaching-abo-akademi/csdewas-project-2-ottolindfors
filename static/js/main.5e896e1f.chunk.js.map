{"version":3,"sources":["api.js","myFunctions.js","AddPortfolioButton.js","Portfolio.js","App.js","index.js"],"names":["TOKEN","BASE_URL","urlBuilder","stockSymbols","type","chartRange","url","i","length","includes","ran","builder","loadFromLocalStorage","objName","data","JSON","parse","localStorage","getItem","Error","loader","saveToLocalStorage","obj","setItem","stringify","saver","AddPortfolioButton","React","Component","Portfolio","props","state","error","loading","console","log","name","this","portfolioData","rows","key","hasOwnProperty","latestPrice","quote","shares","purchasePrice","price","push","String","toFixed","message","App","portfolios","appData","apiUrl","fetch","then","response","ok","json","jsonData","catch","setState","newPortfolioName","toPortfolio","newStockName","toStock","newObjectWithData","addPurchase","date","existingPortfolioContent","dataFetcher","createAndAppendPortfolio","portfolio","className","href","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e896e1f.chunk.js","sourcesContent":["const TOKEN = 'Tpk_391653b184fb45f2a8e9b1270c0306e9';\nconst BASE_URL = 'https://sandbox.iexapis.com/stable/stock/market/batch?';\n\nfunction builder(stockSymbols, type, chartRange) {\n    /*\n    Builds the url for fetching stock data from api.\n    - symbolsArr is an array of stock symbols as strings.\n    - range is the timespan as string that should be fetched (1d, 5d, 1m, ...).\n    - type is 'quote' or 'chart'\n     */\n    let url = BASE_URL;\n    const sym = 'symbols=';\n    const typ = '&types=';\n    const ran = '&range=';\n    const fallbackRange = '1y';\n    const tok = '&token=';\n\n    // Append symbols to the url\n    url += sym;\n    for (let i=0; i<stockSymbols.length; i++) {\n        url += stockSymbols[i];\n        // Append ',' after symbol except after last one\n        if (i < stockSymbols.length - 1) {\n            url += ',';\n        }\n    }\n    // Append types to the url\n    url += typ + type;\n    // Append range to the url\n    if (type.includes('chart')) {\n        if (chartRange) { url += ran + chartRange }\n        else { url += ran + fallbackRange }  // Use fallbackRange if no range was provided\n    }\n    // Append token to the url\n    url += tok + TOKEN;\n\n    return url;\n}\n\nexport const urlBuilder = (stockSymbols, type, chartRange) => {\n  return builder(stockSymbols, type, chartRange);\n};\n","function loader(objName) {\n    /*\n    Loads an JSON object from local storage. Throws error if not found (data=null)\n     */\n    let data = JSON.parse(localStorage.getItem(objName));\n    // Check if null\n    if (!data) {\n        throw new Error(\"Did not find '\" + objName + \"' in local storage\");\n    }\n    return data;\n}\n\nfunction saver(obj, objName) {\n    /*\n    Saves an JSON object to local storage.\n     */\n    localStorage.setItem(objName, JSON.stringify(obj));\n}\n\nexport const loadFromLocalStorage = (objName) => {\n  return loader(objName);\n};\n\nexport const saveToLocalStorage = (obj, objName) => {\n    return saver(obj, objName);\n};","import React from \"react\";\n\nexport class AddPortfolioButton extends React.Component {\n    render() {\n        return (\n            <button>Add Portfolio</button>\n        );\n    }\n}","import React from \"react\";\n\nexport class Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // stockSymbols: [],  // Input from 'add' button\n            stockSymbols: ['AAPL', 'FB', 'TWTR'],\n            data: {},\n            // chartRange: null,  // Input from select menu\n            chartRange: '5d',\n            error: null,\n            loading: false,\n        };\n    }\n\n    render() {\n        console.log(\"==> Portfolio render\");\n\n        const name = this.props.name;\n        const portfolioData = this.props.portfolioData;\n        let rows = [];\n        for (let key in portfolioData) {\n            if (portfolioData.hasOwnProperty(key)) {\n                console.log(\"==> HELLO:\", portfolioData);\n                const latestPrice = portfolioData[key].quote.latestPrice;\n                const shares = portfolioData[key][\"purchase\"].shares;\n                const purchasePrice = portfolioData[key][\"purchase\"].price;\n                rows.push(\n                    <tr key={key}>\n                        <td>{key}</td>\n                        <td>{latestPrice}</td>\n                        <td>{purchasePrice}</td>\n                        <td>{shares}</td>\n                        <td>{String((latestPrice * shares).toFixed(2))}</td>\n                        <td>Select button</td>\n                    </tr>\n                );\n            }\n        }\n\n        // Render error if any\n        const error = this.state.error;\n        if (error) { return <p>{error.message}</p> }\n\n        // Render indicator if loading\n        if (this.state.loading) { return <p>Loading ...</p> }\n\n        // Render normally if no error\n        return (\n            <div>\n                <h2>{name}</h2>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Stock</th>\n                            <th>Latest Price</th>\n                            <th>Purchase Price</th>\n                            <th>Shares</th>\n                            <th>Total</th>\n                            <th>Select</th>\n                        </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport {urlBuilder} from \"./api\";\nimport {loadFromLocalStorage, saveToLocalStorage} from \"./myFunctions\";\nimport {AddPortfolioButton} from './AddPortfolioButton'\nimport {Portfolio} from \"./Portfolio\";\n\nconst LOCALSTORAGE_PORTFOLIOS_NAME = 'portfolios';\nconst LOCALSTORAGE_APPDATA_NAME = 'appData';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            portfolios: [], // Should maybe not be used as it can be derived from appData. Input from 'Add Portfolio' button. [\"Portfolio 0\", \"Portfolio 1\", \"Portfolio 2\"]\n            appData: {},  // All data\n        };\n    }\n\n    // Fetches latest quote and/or chart (historic data) for all stockSymbols\n    dataFetcher(stockSymbols, type, chartRange) {\n        const apiUrl = urlBuilder(stockSymbols, type, chartRange);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                // Extract data and save to local storage\n                return jsonData;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    // *** METHODS TO MANIPULATE THE STATE ***\n    addEmptyPortfolio(newPortfolioName) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty portfolio to appData\n        appData[newPortfolioName] = {};\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty portfolio added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n            );\n    }\n    addEmptyStock(toPortfolio, newStockName) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty stock to portfolio\n        appData[toPortfolio][newStockName] = {};\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty stock added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addEmptyChart(toPortfolio, toStock) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty chart to stock\n        appData[toPortfolio][toStock][\"chart\"] = [];\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty chart added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addChartElement(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", open: 29.99, ...}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add element to chart\n        appData[toPortfolio][toStock][\"chart\"].push(newObjectWithData);\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new chart element added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addQuote(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", open: 29.99, ...}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty quote to stock\n        appData[toPortfolio][toStock][\"quote\"] = newObjectWithData;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new quote added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addPurchase(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", price: 29.99}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add purchase info to stock\n        appData[toPortfolio][toStock][\"purchase\"] = newObjectWithData;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new purchase added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addDummyPurchase(toPortfolio) {\n        // Get appData from state\n        let appData = this.state.appData[toPortfolio];\n        for (let key in appData) {\n            if (appData.hasOwnProperty(key)) {\n                const dummy = {date: \"1970-01-01\", price: 10.00, shares: 10};\n                this.addPurchase(toPortfolio, key, dummy)\n            }\n        }\n    }\n    // Append a whole existing portfolio at once to the appData state\n    appendPortfolio(newPortfolioName, existingPortfolioContent) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty portfolio to appData\n        appData[newPortfolioName] = existingPortfolioContent;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> appended portfolio\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);            }\n        );\n    }\n\n    // Create and append a whole portfolio at once (with dummy 'purchase' element) to the appData state\n    createAndAppendPortfolio(newPortfolioName, stockSymbols, type, chartRange) {\n        // dataFetcher uses fetch() so it returns a promise. Therefore newPortfolio.then() to access the result value.\n        const newPortfolio = this.dataFetcher(stockSymbols, type, chartRange);\n        newPortfolio.then(portfolioData =>\n            {\n                // Add dummy purchase data\n                for (let key in portfolioData) {\n                    if (portfolioData.hasOwnProperty(key)) {\n                        portfolioData[key][\"purchase\"] = {date: \"1970-01-01\", price: 10.00, shares: 10};\n                    }\n                }\n                // Add portfolio to appData\n                let appData = this.state.appData;\n                appData[newPortfolioName] = portfolioData;\n                // Set state\n                this.setState(\n                    { appData: appData },\n                    () => {\n                        console.log(\"==> Data fetched, dummy purchase data added\");\n                        saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                    }\n                )\n            }\n        );\n    }\n\n    // Load data from local storage if avalible\n    componentDidMount() {\n        /*\n        FIRST TRY LOADING DATA FROM LOCAL STORAGE.\n        IF THERE IS NOTHING IN LOCAL STORAGE THEN LOAD FROM INTERNET (BUT ONLY ON USER INPUT REFRESH/GET/ADD BUTTON)\n         */\n\n        // *** CREATE DUMMY DATA. DO NOT USE IN PRODUCTION ***\n        console.log(\"==> Creating dummy data: \");\n        /*\n        this.addEmptyPortfolio(\"My New Portfolio\");\n        this.addEmptyStock(\"My New Portfolio\", \"OOT\");\n        this.addEmptyChart(\"My New Portfolio\", \"OOT\");\n        this.addChartElement(\"My New Portfolio\", \"OOT\", {date: \"1994-02-16\", open: 29.99});\n        this.addChartElement(\"My New Portfolio\", \"OOT\", {date: \"1994-03-16\", open: 29.99});\n        this.addQuote(\"My New Portfolio\", \"OOT\", {date: \"1994-03-16\", latestPrice: 29.99});\n        this.addPurchase(\"My New Portfolio\", \"OOT\", {date: \"1994-02-16\", value: 999.99});\n        this.appendPortfolio(\"My Append Portfolio\", this.state.appData[\"My New Portfolio\"]);\n         */\n        this.createAndAppendPortfolio(\"My Big Portfolio\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', '5d');\n        this.createAndAppendPortfolio(\"My Big Portfolio 2\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', '5d');\n        this.createAndAppendPortfolio(\"My Big Portfolio 3\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', '5d');\n\n        // Load array of portfolio names and all app data from local storage.\n        //Throws error if not found and fails silently outputting error only to console.\n        try {\n            const portfolios = loadFromLocalStorage(LOCALSTORAGE_PORTFOLIOS_NAME);  // Trows error if not found\n            const appData = loadFromLocalStorage(LOCALSTORAGE_APPDATA_NAME);  // Trows error if not found\n            this.setState(\n                { portfolios: portfolios, appData: appData },\n                () => {\n                    console.log(\"==> Loaded 'portfolios' and 'appData' from local storage\");\n                    console.log(\"==> appData:\", this.state.appData)\n                }\n            );\n        }\n        catch (error) {\n            console.log(\"==>\", error);\n        }\n    }\n\n    render() {\n        console.log(\"==> App render\");\n        // Get list of portfolios from appData\n        const appData = this.state.appData;\n        let portfolios = [];\n        for (let portfolio in appData) {\n            if (appData.hasOwnProperty(portfolio)) {\n                portfolios.push(portfolio);\n            }\n        }\n\n        // Render portfolios and 'add portfolio' button\n        return (\n            <div className=\"App\">\n                <h1>SPMS</h1>\n                <a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>\n                <p>15 minute delay in price</p>\n                <AddPortfolioButton />\n                {portfolios.map(portfolio =>\n                    // Pass portfolio name and portfolio data to the portfolio\n                    <Portfolio key={portfolio} name={portfolio} portfolioData={appData[portfolio]}/>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}