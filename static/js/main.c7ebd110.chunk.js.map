{"version":3,"sources":["api.js","myFunctions.js","AddPortfolioModal.js","EvolutionGraph.js","PortfolioTableRow.js","PortfolioTable.js","AddStockModal.js","Portfolio.js","dataFunctions.js","App.js","index.js"],"names":["TOKEN","BASE_URL","BASE_URL_DATE","urlBuilder","stockSymbols","type","chartRange","url","i","length","includes","ran","builder","urlBuilderDate","stockSymbol","yyyymmdd","builderDate","loadFromLocalStorage","objName","data","JSON","parse","localStorage","getItem","Error","loader","saveToLocalStorage","obj","setItem","stringify","console","log","saver","dateToChartRange","isoPurchaseDate","purchaseDate","Date","todayDate","dayDiff","Math","ceil","janFirst","toISOString","slice","ytdDiff","rangeOptionsString","rangeOptionsInt","cont","compareFunctionWName","a","b","name","AddPortfolioModal","props","state","newPortfolioName","inputError","submitError","handleOnSubmit","bind","handleOnChange","handleOnCancel","event","preventDefault","portfolios","this","setState","onAdd","target","value","onCancel","show","onSubmit","onChange","required","onClick","React","Component","EvolutionGraph","random","toFixed","toString","graphRange","days","replace","dateToday","setDate","getDate","months","setMonth","getMonth","years","setFullYear","getFullYear","stocks","showInEuro","euroPerUsd","datesInData","stockNames","graphRangeLimitDate","graphRangeToDate","stock","hasOwnProperty","push","chart","chartKey","close","Number","date","idx","indexOf","dataEntry","sort","aspect","width","height","strokeDasharray","dataKey","map","stockName","key","stroke","generateHslColor","activeDot","r","dot","PureComponent","PortfolioTableRow","handleCheckedChange","onRowCheckedChange","stockData","stockInfo","isChecked","latestPrice","quote","shares","purchase","purchasePrice","price","purchaseCurrency","currency","checked","PortfolioTable","selectedRows","handleRowCheckedChange","handleOnClick","onRemoveSelected","rows","Object","keys","AddStockModal","hasErrors","errorMessage","loading","handleOnsubmit","handleCancel","puchasePriceFetcher","then","fetchedPrice","toUpperCase","stockError","dateError","min","isoDate","apiUrl","fetch","response","ok","json","status","jsonData","catch","error","message","rangeOptions","text","Portfolio","showAddStockModal","handleToggleShowInEuro","handleOnUpdate","handleOnGraphRangeChange","handleToggleShowAddStockModal","handleAddStock","handleOnRemoveSelected","handleRemovePortfolio","onToggleShowInEuro","onUpdate","onGraphRangeChange","onAddStock","onRemovePortfolio","portfolio","userPrefs","isUpdating","defaultValue","entry","minimizeDataStocksOnly","appData","portfolioName","chartData","DEFAULT_USER_PREFS","App","showAddPortfolioModal","toggleShowAddPortfolioModal","handleAddPortfolio","handleRemoveSelected","handleOnRemovePortfolio","dataFetcher","minimizeData","selectedGraphRange","entries","className","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7ebd110.chunk.js","sourcesContent":["const TOKEN = 'Tpk_564e31a7cc054b8c87a93c668202adce';\nconst BASE_URL = 'https://sandbox.iexapis.com/stable/stock/market/batch?';\nconst BASE_URL_DATE = 'https://sandbox.iexapis.com/stable/stock/';\n\nfunction builder(stockSymbols, type, chartRange) {\n    /*\n    Builds the url for fetching stock data from api.\n    - symbolsArr is an array of stock symbols as strings.\n    - range is the timespan as string that should be fetched (1d, 5d, 1m, ...).\n    - type is 'quote' or 'chart'\n     */\n    let url = BASE_URL;\n    const sym = 'symbols=';\n    const typ = '&types=';\n    const ran = '&range=';\n    const fallbackRange = '1y';\n    const tok = '&token=';\n\n    // Append symbols to the url\n    url += sym;\n    for (let i=0; i<stockSymbols.length; i++) {\n        url += stockSymbols[i];\n        // Append ',' after symbol except after last one\n        if (i < stockSymbols.length - 1) {\n            url += ',';\n        }\n    }\n    // Append types to the url\n    url += typ + type;\n    // Append range to the url\n    if (type.includes('chart')) {\n        if (chartRange) { url += ran + chartRange }\n        else { url += ran + fallbackRange }  // Use fallbackRange if no range was provided\n    }\n    // Append token to the url\n    url += tok + TOKEN;\n\n    return url;\n}\n\nfunction builderDate(stockSymbol, yyyymmdd) {\n    /*\n    Builds an url for fetching stock price at a specific date.\n     */\n    let url = BASE_URL_DATE;\n\n    url += stockSymbol;\n    url += '/chart/date/';\n    url += yyyymmdd;\n    url += '?chartByDay=true&token=';\n    url += TOKEN;\n\n    return(url)\n}\n\nexport const urlBuilder = (stockSymbols, type, chartRange) => {\n  return builder(stockSymbols, type, chartRange);\n};\n\nexport const urlBuilderDate = (stockSymbol, yyyymmdd) => {\n    return builderDate(stockSymbol, yyyymmdd);\n};\n","/*\nLoads an JSON object from local storage. Throws error if not found (data=null)\n */\nfunction loader(objName) {\n    // Get JSON from local storage\n    let data = JSON.parse(localStorage.getItem(objName));\n    // Check if null\n    if (!data) {\n        throw new Error(\"Did not find '\" + objName + \"' in local storage\");\n    }\n    return data;\n}\nexport const loadFromLocalStorage = (objName) => {\n    return loader(objName);\n};\n\n/*\nSaves object as JSON to local storage.\n */\nfunction saver(obj, objName) {\n    localStorage.setItem(objName, JSON.stringify(obj));\n    console.log(\"==> Saved to local storage '\" + objName + \"'\");\n}\nexport const saveToLocalStorage = (obj, objName) => {\n    return saver(obj, objName);\n};\n\n/*\nCalculate a chart range (that the IEXCloud API accepts) from iso date String.\nTakes as input an iso date.\nReturns a chart range as String.\n */\nexport function dateToChartRange(isoPurchaseDate) {\n    const purchaseDate = new Date(isoPurchaseDate);\n    const todayDate = new Date();\n    // dayDiff = number of days since purchase date\n    const dayDiff = Math.ceil((todayDate - purchaseDate) / (1000 * 60 * 60 * 24));  // Ceil ensures enough days\n    // janFirst = 1 Jan this year\n    const janFirst = new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n    // ytdDiff = number of days since january 1 this year\n    const ytdDiff = Math.ceil((todayDate - janFirst) / (1000 * 60 * 60 * 24));  // Days since Jan 1 (at most 365)\n\n    // graph range options are 5d, 1m, 3m, 6m, 1y, 2y, 5y, max, ytd\n    let rangeOptionsString = [\"5d\", \"1m\", \"3m\", \"6m\", \"1y\", \"2y\", \"5y\"];  // options the API accept\n    let rangeOptionsInt = [5, 32, 94, 168, 367, 732, 1828];  // number of days corresponding to the range options\n    let chartRange = \"\";  // The range that will be returned\n\n    // Find the smallest range option that is larger than dayDiff (the minimum needed range)\n    // Compare the elements in rangeOptionsInt one by one (smallest to largest) until one that is larger than the needed range (dayDiff) is found\n    let i = 0;  // used as array index\n    let cont = true;\n    while(cont) {\n        // Test if current range option is larger than the minimum needed range (dayDiff)\n        if (dayDiff <= rangeOptionsInt[i]) {\n            // Days since purchase is less than the current range option, i.e. chartRange=rangeOptionsInt[i] is a valid choice\n            if (ytdDiff >= dayDiff && ytdDiff <= rangeOptionsInt[i]) {\n                // When possible prefer ytd over fixed range rangeOptionsInt[i]\n                chartRange = \"ytd\";\n            } else {\n                // The API requires rangeOptionsString[i] instead of rangeOptionsInt[i]\n                chartRange = rangeOptionsString[i];\n            }\n            // Stop searching\n            cont = false;\n        } else {\n            // days since purchase is more than the current range option\n            if (i === rangeOptionsInt.length) {\n                // The range options are not enough. A greater range is needed\n                chartRange = \"max\";\n                // Stop searching\n                cont = false;\n            }\n        }\n        // continue to next element in rangeOptionsInt and rangeOptionsString\n        i++;\n    }\n\n    return chartRange;\n}\n\n/*\nCompare two elements.\n */\nexport function compareFunctionWName(a, b) {\n    if (a.name < b.name) {return -1}\n    if (a.name > b.name) {return 1}\n    return 0;\n}\n\n/*\nCompare two elements.\n */\nexport function compareFunctionWDate(a, b) {\n    if (a.date < b.date) {return -1}\n    if (a.date > b.date) {return 1}\n    return 0;\n}\n\n","import React from \"react\";\n\nexport class AddPortfolioModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        };\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleOnCancel = this.handleOnCancel.bind(this);\n    }\n    handleOnSubmit(event) {\n        event.preventDefault();\n        // Validate that the name is unique set state and submit\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = this.state.newPortfolioName;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({ submitError: \"Pick another name for your portfolio\" })\n        }\n        else {\n            // Reset state\n            this.setState({\n                newPortfolioName: \"\",\n                submitError: \"\"\n            });\n            // Pass newPortfolioName to parent\n            this.props.onAdd(newPortfolioName);\n        }\n    }\n    handleOnChange(event) {\n        // Validate that the name is unique and set state\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = event.target.value;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"You have another portfolio with this name\"\n            })\n        }\n        else {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"\",\n                submitError: \"\"\n            })\n        }\n    }\n    handleOnCancel() {\n        this.setState({\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        });\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            // Should render nothing in the future\n            return null;\n        }\n        return (\n            <div>\n                <h2>Add a new portfolio</h2>\n                <form onSubmit={this.handleOnSubmit}>\n                    <label>\n                        Portfolio name\n                        <input type=\"text\" value={this.state.newPortfolioName} onChange={this.handleOnChange} required/>\n                    </label>\n                    <p>{this.state.inputError}</p>\n                    <p>{this.state.submitError}</p>\n                    <input type=\"submit\" value=\"Add\" />\n                    <button onClick={this.handleOnCancel}>Cancel</button>\n                </form>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line, ResponsiveContainer} from \"recharts\";\nimport {compareFunctionWName} from \"./myFunctions\";\n\nexport class EvolutionGraph extends React.PureComponent{\n\n    // Move these two functions to myfunctions.js\n    generateHslColor() {\n        // Generate random hsl color. Ensures the color is visible on the chart\n        const hue = (Math.random() * 360).toFixed(0).toString();\n        const saturation = \"40%\";\n        const lightness = \"70%\";\n        return \"hsl(\" + hue + \",\" + saturation + \",\" + lightness + \")\";\n    }\n    graphRangeToDate(graphRange) {\n        // graphRange options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n        if (graphRange.includes(\"d\") && !graphRange.includes(\"ytd\")) {\n            const days = graphRange.replace(\"d\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'days' number of days in the past and return the new date\n            return new Date(new Date().setDate(dateToday.getDate() - days));\n        }\n        if (graphRange.includes(\"m\") && !graphRange.includes(\"max\")) {\n            const months = graphRange.replace(\"m\", \"\");  // 1m, 3m, 6m\n            const dateToday = new Date();\n            // Set the date to 'months' number of months in the past and return the new date\n            return new Date(new Date().setMonth(dateToday.getMonth() - months));\n        }\n        if (graphRange.includes(\"ytd\")) {\n            // Return a Date object set to 1 Jan of the current year\n            return new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n        }\n        if (graphRange.includes(\"y\") && !graphRange.includes(\"ytd\")) {\n            const years = graphRange.replace(\"y\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'years' number of years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n        if (graphRange.includes(\"max\")) {\n            const years = 15;  // iexcloud provides 15 years of data at maximum\n            const dateToday = new Date();\n            // Set the date 500 years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const graphRange = this.props.graphRange;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        const data = [];\n        let datesInData = [];\n        let stockNames = [];\n\n        // Translate 'graphRange' to number of days\n        const graphRangeLimitDate = this.graphRangeToDate(graphRange);\n\n        // Populate 'data' and 'stockNames' with data in the correct format for the LineChart component\n        for (let stock in stocks) {  // stocks = {aapl: {...}, fb: {...}, ...}\n            if (stocks.hasOwnProperty(stock)) {\n                stockNames.push(stock);\n\n                const chart = stocks[stock].chart;\n                for (let chartKey in chart) {  // chart = {0: {date: --, close: --}, 1: {date: --, close: --}, ...}\n                    if (chart.hasOwnProperty(chartKey)) {\n                        // Close value in correct currency\n                        let close = 0;\n                        if (showInEuro) {\n                            close = Number((chart[chartKey].close * euroPerUsd).toFixed(2));  // .toFixed(2) without casting to Number causes the chart to scale incorrectly (if there are problems in the future).\n                        }\n                        else {\n                            close = chart[chartKey].close\n                        }\n\n                        // Date\n                        const date = chart[chartKey].date;\n\n                        // Filter the dates for the graph (LineChart)\n                        if (new Date(date) >= graphRangeLimitDate) {\n                            // Check if date exist in data\n                            if(!datesInData.includes(date)) {\n                                // Keeping track of what dates are already in data. Easier and faster this way than iterating data\n                                datesInData.push(date);\n\n                                // Create new entry in data. Add first stock's close value\n                                const dataEntry = {};\n                                dataEntry[\"name\"] = date;\n                                dataEntry[stock] = close;  // { name: \"2019-12-16\", FB: 205.12 }\n                                data.push(dataEntry);  // [{ name: \"2019-12-16\", FB: 205.12 }, ...]\n                            }\n                            else {\n                                // The date does already exist in data.\n                                // Add the stocks value to an already existing entry.\n\n                                // data is an array so the values/entries have fixed order.\n                                // the values/entries in data has the exact same order as the dates in datesInData\n                                // (this is because they are added by the above if statement)\n                                const idx = datesInData.indexOf(date);\n                                let dataEntry = data[idx];\n                                dataEntry[stock] = close;\n                                data[idx] = dataEntry;  // keeps the order intact\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort data. Recharts assumes the data is ordered.\n        data.sort(compareFunctionWName);\n\n        return (\n            // Responsive container makes the chart adapt to the sise of the parent container\n            // margin={{top:5, right: 30, left: 20, bottom: 5}}\n            // use type=\"monotone\" in Line to make the graph smooth\n            <div>\n                <ResponsiveContainer aspect={1.7} width={500}>\n                    <LineChart width=\"100%\" height=\"100%\" data={data}>\n                        <CartesianGrid strokeDasharray=\"1 3\"/>\n                        <XAxis dataKey=\"name\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend/>\n                        {stockNames.map(stockName =>\n                            <Line\n                                key={stockName}\n\n                                dataKey={stockName}\n                                stroke={this.generateHslColor()}\n                                activeDot={{ r: 4 }}\n                                dot={false}\n                            />\n                            )\n                        }\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n}","import React from \"react\";\nexport class PortfolioTableRow extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleCheckedChange = this.handleCheckedChange.bind(this);\n    }\n\n    handleCheckedChange(event) {\n        this.props.onRowCheckedChange(event);  // e.target.checked, e.target.name checked = true/false, name = AAPL , FB,...\n    }\n\n    render() {\n        // Props\n        const stock = this.props.stock;\n        const stockData = this.props.stockInfo;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n        const isChecked = this.props.isChecked;\n\n        const latestPrice = stockData.quote.latestPrice;\n        const shares = stockData.purchase.shares;\n        const purchasePrice = stockData.purchase.price;\n        const purchaseCurrency = stockData.purchase.currency;\n\n        // See Thinking in react for handling the input button\n        return (\n            <tr>\n                <td>{stock}</td>\n                <td>{showInEuro ? (latestPrice * euroPerUsd).toFixed(2) + \" EUR\" : latestPrice + \" USD\"}</td>\n                <td>{purchasePrice} {purchaseCurrency}</td>\n                <td>{shares}</td>\n                <td>{showInEuro ? (latestPrice * shares * euroPerUsd).toFixed(2) + \" EUR\" : (latestPrice * shares).toFixed(2) + \" USD\"}</td>\n                <td><input name={stock} type=\"checkbox\" checked={isChecked} onChange={this.handleCheckedChange}/></td>\n            </tr>\n        );\n    }\n}","import React from \"react\";\nimport {PortfolioTableRow} from \"./PortfolioTableRow\";\n\nexport class PortfolioTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // *******************************************************\n            // NOTE: This is a derived state and should not be used.\n            // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n            // Atm i will continue with this and review it later.\n            //\n            // Checking the number of keys in the object in selectedRows\n            // when rendering temporarily fixes the problem of the state not\n            // being set at the initial render.\n            // *******************************************************\n            selectedRows: [],  // [AAPL: true, FB: false, TWTR: true, ...]\n        };\n        this.handleRowCheckedChange = this.handleRowCheckedChange.bind(this);\n        this.handleOnClick = this.handleOnClick.bind(this);\n    }\n\n    componentDidMount() {\n        // Populate initial state after component mount. Set all rows not checked.\n        const stocks = this.props.stocks;\n        let selectedRows = [];\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                selectedRows[stock] = false;\n            }\n        }\n        this.setState({ selectedRows: selectedRows });\n    }\n\n    handleRowCheckedChange(event) {\n        // Extract stock name and whether the <input ... /> is checked\n        const stock = event.target.name;  // event.target is the <input ... /> element in PortfolioTableRow\n        const isChecked = event.target.checked;\n\n        // Update the state\n        let selectedRows = this.state.selectedRows;\n        selectedRows[stock] = isChecked;\n        this.setState({ selectedRows: selectedRows });\n    }\n    handleOnClick() {\n        this.props.onRemoveSelected(this.state.selectedRows);\n    }\n\n    render() {\n        // Props\n        const stocks = this.props.stocks;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        // TODO: Do not use derived states\n        // Derived state\n        const selectedRows = this.state.selectedRows;\n\n        let rows = [];\n        for (let stockSymbol in stocks) {\n            if (stocks.hasOwnProperty(stockSymbol)) {\n                rows.push(\n                    <PortfolioTableRow\n                        key={stockSymbol}\n                        stock={stockSymbol}\n                        stockInfo={stocks[stockSymbol]}\n                        showInEuro={showInEuro}\n                        euroPerUsd={euroPerUsd}\n                        isChecked={Object.keys(selectedRows).length === 0 ? false : selectedRows[stockSymbol]}\n                        onRowCheckedChange={this.handleRowCheckedChange}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div>\n                <button\n                    onClick={this.handleOnClick}>\n                    Remove selected\n                </button>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Stock</th>\n                        <th>Latest Price</th>\n                        <th>Purchase Price</th>\n                        <th>Shares</th>\n                        <th>Total</th>\n                        <th>Select</th>\n                    </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {urlBuilderDate} from \"./api\";\n\nexport class AddStockModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            shares: \"\",\n            hasErrors: false,\n            errorMessage: \"\",\n            loading: false,\n        };\n        this.handleOnsubmit = this.handleOnsubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    handleOnsubmit(event) {\n        event.preventDefault();\n\n        const stockSymbol = this.state.stockSymbol;\n        const purchaseDate = this.state.purchaseDate;\n        const shares = this.state.shares;\n\n        let purchasePrice = null;\n        this.setState(\n            { loading: true },\n            () => {\n                // Fetch purchase price from API\n                let puchasePriceFetcher = this.puchasePriceFetcher(stockSymbol, purchaseDate);  // Returns a promise\n                puchasePriceFetcher.then(fetchedPrice => {\n                    if (!this.state.hasErrors) {\n                        purchasePrice = fetchedPrice;\n                        this.props.onAdd(stockSymbol, purchaseDate, purchasePrice, shares);\n                    }\n                    this.setState({\n                        hasErrors: false,\n                        loading: false,\n                    });\n                })\n                // Errors are already caught in purchasePriceFetcher so no need to do it here\n            }\n        );\n\n    }\n    handleOnChange(event) {\n        if (event.target.name === \"stockSymbol\") {\n            this.setState({ stockSymbol: event.target.value.toUpperCase() });\n        }\n        if (event.target.name === \"purchaseDate\") {\n            this.setState({ purchaseDate: event.target.value })\n        }\n        if (event.target.name === \"shares\") {\n            this.setState({ shares: event.target.value })\n        }\n    }\n    handleCancel() {\n        // Reset state\n        this.setState({\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            stockError: \"\",\n            dateError: \"\",\n        });\n        // Action\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        if (this.state.loading) {\n            // Loading while fetching data\n            return (\n                <p>Loading ...</p>\n            )\n        }\n        return (\n            <div>\n                <h3>Add stock</h3>\n                <form onSubmit={this.handleOnsubmit}>\n                    <label>\n                        Stock symbol\n                        <input type=\"text\" name=\"stockSymbol\" value={this.state.stockSymbol} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Date of purchase\n                        <input type=\"date\" name=\"purchaseDate\" value={this.state.purchaseDate} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Number of shares\n                        <input type=\"number\" min=\"1\" name=\"shares\" value={this.state.shares} onChange={this.handleOnChange} required/>\n                    </label>\n                    <input type=\"submit\" value=\"Add\"/>\n                </form>\n                <p>{this.state.errorMessage}</p>\n                <button onClick={this.handleCancel}>Cancel</button>\n            </div>\n        )\n    }\n    puchasePriceFetcher(stockSymbol, isoDate) {\n        // isoDate should be of format YYYY-MM-DD as returned by the <input type=\"date />\n        const yyyymmdd = isoDate.replace(/-/g, \"\");\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    // API returns an empty json if the stock symbol is valid but there is no available data.\n                    return response.json()  // returns 'undefined' if json from api is empty\n                }\n                if (response.status === 404) {\n                    // API throws 404 if stock symbol is unknown\n                    throw new Error(\"Unknown stock symbol\");\n                }\n                else {\n                    // All other errors\n                    throw new Error(\"Error while fetching from api ...\");\n                }\n            })\n            .then(jsonData => {\n                // The API returns an empty json if the stock symbol is valid but there is no available data.\n                if (jsonData.length > 0) {\n                    return jsonData[0].close;\n                }\n                else {\n                    throw new Error(\"No available stock data for that date. Either the exchange was closed that day (e.g. weekend) or the date is too far in the past.\");\n                }\n            })\n            .catch(error => {\n                // Handle errors\n                console.log(\"==>\", error.message);\n                this.setState({\n                    hasErrors: true,\n                    errorMessage : error.message\n                });\n            })\n    }\n}","import React from \"react\";\nimport {EvolutionGraph} from \"./EvolutionGraph\";\nimport {PortfolioTable} from \"./PortfolioTable\";\nimport {AddStockModal} from \"./AddStockModal\";\n\nconst rangeOptions = [\n    {value: \"5d\", text: \"5 days\",},\n    {value: \"1m\", text: \"1 month\"},\n    {value: \"3m\", text: \"3 months\"},\n    {value: \"6m\", text: \"6 months\"},\n    {value: \"ytd\", text: \"This year\"},\n    {value: \"1y\", text: \"1 year\"},\n    {value: \"2y\", text: \"2 years\"},\n    {value: \"5y\", text: \"5 years\"},\n    {value: \"max\", text: \"Maximum available\"}\n];\nconst euroPerUsd = 0.90;  // Later change this to API call\n\nexport class Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAddStockModal: false,\n        };\n        this.handleToggleShowInEuro = this.handleToggleShowInEuro.bind(this);\n        this.handleOnUpdate = this.handleOnUpdate.bind(this);\n        this.handleOnGraphRangeChange = this.handleOnGraphRangeChange.bind(this);\n        this.handleToggleShowAddStockModal = this.handleToggleShowAddStockModal.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n        this.handleOnRemoveSelected = this.handleOnRemoveSelected.bind(this);\n        this.handleRemovePortfolio = this.handleRemovePortfolio.bind(this);\n    }\n    handleToggleShowInEuro(event) {\n        this.props.onToggleShowInEuro(event);\n    }\n    handleOnUpdate(event) {\n        // Send portfolio's name to the parent function\n        this.props.onUpdate(event.target.name);\n    }\n    handleOnGraphRangeChange(event) {\n        // Pas portfolio name and the selected range to the parent\n        this.props.onGraphRangeChange(this.props.name, event.target.value);\n    }\n    handleToggleShowAddStockModal() {\n        this.setState({ showAddStockModal: !this.state.showAddStockModal });\n    }\n    handleAddStock(stockSymbol, purchaseDate, purchasePrice, shares) {\n        this.handleToggleShowAddStockModal();\n        this.props.onAddStock(this.props.name, stockSymbol, purchaseDate, purchasePrice, shares);\n    }\n    handleOnRemoveSelected(selectedRows) {\n        this.props.onRemoveSelected(this.props.name, selectedRows);\n    }\n    handleRemovePortfolio() {\n        this.props.onRemovePortfolio(this.props.name)\n    }\n\n    render() {\n        // Prevent errors when initial (and maybe also other asynchronous) render happen before userPrefs and name are set in appData.\n        if (typeof this.props.name === 'undefined' ||\n            typeof this.props.portfolio === 'undefined' ||\n            typeof this.props.portfolio.userPrefs === 'undefined'\n        ) {\n            return <p>Loading ...</p>\n        }\n        // Props\n        const name = this.props.name;\n        const portfolio = this.props.portfolio;\n        const isUpdating = this.props.isUpdating;\n        // \"Refined\" props\n        const stocks = portfolio.stocks;\n        const showInEuro = portfolio.userPrefs.showInEuro;\n        const graphRange = portfolio.userPrefs.graphRange;\n\n\n        // For handling button press read https://reactjs.org/docs/handling-events.html\n\n        return (\n            <div>\n                <h2>{name}</h2>\n                <button\n                    name={name}\n                    onClick={this.handleToggleShowInEuro}>\n                    {showInEuro ? \"USD\" : \"EUR\" }\n                </button>\n                <button\n                    name={name}\n                    onClick={this.handleOnUpdate}>\n                    {isUpdating ? \"Fetching ...\" : \"Update\"}\n                </button>\n                <div>\n                    <EvolutionGraph\n                        stocks={stocks}\n                        graphRange={graphRange}\n                        showInEuro={showInEuro}\n                        euroPerUsd={euroPerUsd}\n                    />\n                    <select defaultValue={graphRange} onChange={this.handleOnGraphRangeChange}>\n                        {rangeOptions.map(entry => {\n                            return <option\n                                key={entry.value}\n                                value={entry.value}>\n                                {entry.value}\n                            </option>\n                        })}\n                    </select>\n                </div>\n                <button\n                    onClick={this.handleToggleShowAddStockModal}>\n                    Add stock\n                </button>\n                <AddStockModal\n                    show={this.state.showAddStockModal}\n                    onCancel={this.handleToggleShowAddStockModal}\n                    onAdd={this.handleAddStock}>\n                    \"I am a child of this modal\"\n                </AddStockModal>\n                <PortfolioTable\n                    stocks={stocks}\n                    showInEuro={showInEuro}\n                    euroPerUsd={euroPerUsd}\n                    onRemoveSelected={this.handleOnRemoveSelected}\n                />\n                <button\n                    onClick={this.handleRemovePortfolio}>\n                    Remove portfolio\n                </button>\n            </div>\n        );\n    }\n}","// TODO: reuse code\n\nexport function minimizeData(stockData, appData, portfolioName, purchaseDate, purchasePrice, shares) {\n    // Clean data fetched from API for a smaller storage footprint\n\n    const stockSymbol = Object.keys(stockData)[0];\n\n    // Get only the necessary quote data\n    let quote = {};\n    quote[\"companyName\"] = stockData[stockSymbol].quote[\"companyName\"];\n    quote[\"latestPrice\"] = stockData[stockSymbol].quote[\"latestPrice\"];\n\n    // Get only the necessary chart data\n    let chart = {};\n    const chartData = stockData[stockSymbol].chart;\n    for (let key in chartData) {\n        if (chartData.hasOwnProperty(key)) {\n            chart[key] = {\"date\": chartData[key].date, \"close\": chartData[key].close};\n        }\n    }\n\n    // Purchase info\n    const purchase = {date: purchaseDate, price: purchasePrice, shares: shares, currency: \"USD\"};  // default currency \"USD\"\n\n    // Add quote, chart and purchase to existing portfolio\n    appData[portfolioName].stocks[stockSymbol] = {\"quote\": quote, \"chart\": chart, \"purchase\": purchase};\n\n    return appData;\n}\n\n/*\nClean data fetched from API for a smaller storage footprint\nDoes not manipulate purchase date\n */\nexport function minimizeDataStocksOnly(stockData, appData, portfolioName) {\n    const stockSymbol = Object.keys(stockData)[0];\n\n    // Get only the necessary quote data\n    let quote = {};\n    quote[\"companyName\"] = stockData[stockSymbol].quote[\"companyName\"];\n    quote[\"latestPrice\"] = stockData[stockSymbol].quote[\"latestPrice\"];\n\n    // Get only the necessary chart data\n    let chart = {};\n    const chartData = stockData[stockSymbol].chart;\n    for (let key in chartData) {\n        if (chartData.hasOwnProperty(key)) {\n            chart[key] = {\"date\": chartData[key].date, \"close\": chartData[key].close};\n        }\n    }\n\n    // Add quote, chart and purchase to existing portfolio\n    appData[portfolioName].stocks[stockSymbol][\"quote\"] = quote;\n    appData[portfolioName].stocks[stockSymbol][\"chart\"] = chart;\n\n    return appData;\n}","import React from 'react';\nimport './App.css';\nimport {urlBuilder, urlBuilderDate} from \"./api\";\nimport {dateToChartRange, loadFromLocalStorage, saveToLocalStorage} from \"./myFunctions\";\nimport {AddPortfolioModal} from './AddPortfolioModal'\nimport {Portfolio} from \"./Portfolio\";\nimport {minimizeData, minimizeDataStocksOnly} from \"./dataFunctions\";\n\n// TODO: Reuse code segments\n\n// Name of the JSON file that will be stored in the browser's local storage\nconst LOCALSTORAGE_APPDATA_NAME = 'appData';\n\n// Default preferences for new portfolios\nconst DEFAULT_USER_PREFS = {showInEuro: false, graphRange: \"6m\"};\n\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            appData: {},  // All data the app uses\n            showAddPortfolioModal: false,  // For toggling the visibility of AddPortfolioModal\n            isUpdating: false,  // Used in Portfolio for changing button text.\n            // TODO: isUpdating affect \"update\" buttons for all portfolios when used as a state for the whole App.\n            //  Wanted result is to only affect individual Portfolios separately.\n        };\n        this.toggleShowAddPortfolioModal = this.toggleShowAddPortfolioModal.bind(this);\n        this.handleAddPortfolio = this.handleAddPortfolio.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n        this.handleOnUpdate = this.handleOnUpdate.bind(this);\n        this.handleOnGraphRangeChange = this.handleOnGraphRangeChange.bind(this);\n        this.handleToggleShowInEuro = this.handleToggleShowInEuro.bind(this);\n        this.handleRemoveSelected = this.handleRemoveSelected.bind(this);\n        this.handleOnRemovePortfolio = this.handleOnRemovePortfolio.bind(this);\n    }\n\n    // TODO: Move dataFetcher() and puchasePriceFetcher() to myFunctions.js\n    /*\n    Fetches latest specified types of data for all stockSymbols.\n    Returns the fetched data object or throws an error.\n     */\n    dataFetcher(stockSymbols, type, chartRange) {\n        // Get the URI\n        const apiUrl = urlBuilder(stockSymbols, type, chartRange);\n        // Fetch the stock data\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" the json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                // Return the json data object\n                return jsonData;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    /*\n    Fetch the closing price of some stock at a specific date. Used for fetching purchase prices.\n    Returns the closing price or throws an error.\n     */\n    puchasePriceFetcher(stockSymbol, yyyymmdd) {\n        // Get the URI\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n        // Fetch the stock data (purchase price)\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                // Returns the stock's closing price\n                return jsonData[0].close;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    /*\n    Tries to load appData from local storage when the page is refreshed. If there is nothing to load from local storage\n    (meaning the user has not visited the site before, or has deleted local storage between visits) an error is printed\n    to the console. This is part of the normal functionality and is not an indication of something malfunctioning.\n     */\n    componentDidMount() {\n        // Output message in console (mostly for debugging purpose)\n        console.log(\"==> componentDidLoad\");\n        // Try loading appData from local storage.\n        try {\n            const appData = loadFromLocalStorage(LOCALSTORAGE_APPDATA_NAME);  // Trows error if not found\n            this.setState(\n                { appData: appData },\n                () => console.log(\"==> Loaded 'portfolios' and 'appData' from local storage\")\n            );\n        }\n        catch (error) {\n            // No appData Output error to console\n            console.log(\"==> No appData in local storage :\", error);\n        }\n    }\n\n    /*\n    Toggle visibility of AddPortfolioModal.\n     */\n    toggleShowAddPortfolioModal() {\n        this.setState({ showAddPortfolioModal: !this.state.showAddPortfolioModal });\n    };\n\n    /*\n    Create a new portfolio and save to local storage.\n     */\n    handleAddPortfolio(newPortfolioName) {\n        // Hide the modal\n        this.toggleShowAddPortfolioModal();\n        // copy the current state\n        let appData = this.state.appData;\n        // Add new empty portfolio with default user preferences\n        appData[newPortfolioName] = {\"userPrefs\": DEFAULT_USER_PREFS};\n        appData[newPortfolioName][\"stocks\"] = {};\n        // Set state (save appData with the new portfolio)\n        this.setState(\n            {appData: appData},\n            () => {\n                console.log(\"==> Created new portfolio '\" + newPortfolioName + \"'\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n\n    /*\n    Add a new stock to the portfolio (in state.appData), fetch quote and chart data (IEXCloud API), and save to local storage.\n     */\n    handleAddStock(portfolioName, stockSymbol, purchaseDate, purchasePrice, shares) {\n        console.log(\"==> Adding stock to\", portfolioName, stockSymbol, purchaseDate, purchasePrice, shares);\n\n        // Calculate the needed chartRange from purchaseDate\n        const chartRange = dateToChartRange(purchaseDate);\n\n        // Fetch chart and quota data\n        const type = 'quote,chart';  // quote for latest data, chart for historical data\n        let dataFetcher = this.dataFetcher([stockSymbol], type, chartRange);\n        dataFetcher.then(stockData => {\n            // Copy appData from state\n            let appData = this.state.appData;\n            // Add new cleaned (minimized) stock data to appData\n            appData = minimizeData(\n                stockData,\n                appData,\n                portfolioName,\n                purchaseDate,\n                purchasePrice,\n                shares\n            );\n\n            // Set state and save to local storage\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> Stock data added to '\" + portfolioName + \"'\");\n                    saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                }\n            )\n        });\n    }\n\n    /*\n    Fetches latest (updates) stock data since purchase date for all stocks in a portfolio in state.appData.\n    Using async/await is an ad-hoc solution and is used since dataFetcher() is asynchronous. The motivation for using\n    await is that since dataFetcher() is inside a for-loop the loop would not otherwise \"wait\" for the dataFetcher to\n    complete fetching the data and the dataFetcher.then() would never be executed.\n     */\n    async handleOnUpdate(portfolioName) {\n        console.log(\"==> Updating '\" + portfolioName + \"'\");\n\n        // Change text inside the \"update\" button int the Portfolios\n        this.setState({ isUpdating : true });\n\n        // Copy appData\n        let appData = this.state.appData;\n\n        // Update one stock at a time\n        let stocks = appData[portfolioName].stocks;\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                // Calculate the needed chartRange from purchase date\n                const chartRange = dateToChartRange(stocks[stock].purchase.date);\n                // Fetch chart and quota data\n                const type = 'quote,chart';\n                // Fetch the new stock data\n                let dataFetcher = this.dataFetcher([stock], type, chartRange);\n                // await is used so that the execution of the for-loop waits for the execution of .then()\n                await dataFetcher.then(stockData => {\n                    appData = minimizeDataStocksOnly(\n                        stockData,\n                        appData,\n                        portfolioName\n                    );\n                })\n            }\n        }\n\n        // Set state and save to local storage\n        this.setState(\n            { appData: appData, isUpdating: false},\n            () => {\n                console.log(\"==> Updated portfolio '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n\n    /*\n    Change the visible date range in the stock graph.\n     */\n    handleOnGraphRangeChange(portfolioName, selectedGraphRange) {\n        // Copy state.appData\n        let appData = this.state.appData;\n        // Modify userPrefs for portfolio\n        appData[portfolioName].userPrefs[\"graphRange\"] = selectedGraphRange;\n        // Set state and save to local storage\n        this.setState(\n            { appData: appData },\n            () => saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME)\n        )\n    }\n\n    /*\n    Toggle shown currencies for a portfolio. Does not affect purchase price since historical changes in a currency's\n    value would have to be considered.\n     */\n    handleToggleShowInEuro(event) {\n        // Get portfolio name from the event (triggered by button in Portfolio)\n        const portfolioName = event.target.name;\n        // Copy state.appData\n        let appData = this.state.appData;\n        // Toggle currency\n        appData[portfolioName].userPrefs[\"showInEuro\"] = !appData[portfolioName].userPrefs[\"showInEuro\"];\n        // Set state and save to local storage\n        this.setState(\n            { appData: appData },\n            () => saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME)\n            );\n    }\n\n    /*\n    Removes rows from a portfolio in state.appData.\n    Takes as input the name of a portfolio, and an array of pairs consisting of stockSymbol and a boolean value telling\n    whether the stock symbol is selected for removal or not.\n     */\n    handleRemoveSelected(portfolioName, selectedRows) {\n        // Copy appData\n        let appData = this.state.appData;\n        // Check which rows are marked for deletion\n        for (let [stockSymbol, booleanValue] of Object.entries(selectedRows)) {\n            if (booleanValue) {\n                // Delete stock entry\n                delete appData[portfolioName].stocks[stockSymbol]\n            }\n        }\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> Deleted selected stocks from '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n\n    /*\n    Removes a portfolio.\n     */\n    handleOnRemovePortfolio(portfolioName) {\n        // Copy state.appData for manipulation\n        let appData = this.state.appData;\n        // Delete the portfolio\n        delete appData[portfolioName];\n        // Set state and save to local storage\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> Deleted portfolio '\" + portfolioName + \"'\");\n                saveToLocalStorage(appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        )\n    }\n\n    /*\n    Render the app.\n     */\n    render() {\n        console.log(\"==> App render\");\n\n        // Get list of portfolios from state.appData\n        const appData = this.state.appData;\n        let portfolios = [];\n        for (let portfolioName in appData) {\n            if (appData.hasOwnProperty(portfolioName)) {\n                portfolios.push(portfolioName);\n            }\n        }\n\n        return (\n            <div className=\"App\">\n                <h1>SPMS</h1>\n                <p><a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>. 15 minute delay in price.</p>\n                <p>This app is a work in progress.</p>\n                <p>Known issues: The graph does not update when a stock is added (manual refresh by user is needed).</p>\n\n                <button\n                    onClick={this.toggleShowAddPortfolioModal}>\n                    Add portfolio\n                </button>\n\n                <AddPortfolioModal\n                    show={this.state.showAddPortfolioModal}\n                    onCancel={this.toggleShowAddPortfolioModal}\n                    onAdd={this.handleAddPortfolio}\n                    portfolios={portfolios}>\n                </AddPortfolioModal>\n\n                {portfolios.map(portfolioName =>\n                    <Portfolio\n                        key={portfolioName}\n                        name={portfolioName}\n                        portfolio={appData[portfolioName]}\n                        isUpdating={this.state.isUpdating}\n                        onToggleShowInEuro={this.handleToggleShowInEuro}\n                        onUpdate={this.handleOnUpdate}\n                        onGraphRangeChange={this.handleOnGraphRangeChange}\n                        onAddStock={this.handleAddStock}\n                        onRemoveSelected={this.handleRemoveSelected}\n                        onRemovePortfolio={this.handleOnRemovePortfolio}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}