{"version":3,"sources":["api.js","myFunctions.js","AddPortfolioModal.js","EvolutionGraph.js","PortfolioTableRow.js","RemoveSelectedBtn.js","PortfolioTable.js","AddStockModal.js","Portfolio.js","App.js","index.js"],"names":["TOKEN","BASE_URL","BASE_URL_DATE","urlBuilder","stockSymbols","type","chartRange","url","i","length","includes","ran","builder","urlBuilderDate","stockSymbol","yyyymmdd","builderDate","loadFromLocalStorage","objName","data","JSON","parse","localStorage","getItem","Error","loader","saveToLocalStorage","obj","setItem","stringify","console","log","saver","AddPortfolioModal","props","state","newPortfolioName","inputError","submitError","handleOnSubmit","bind","handleOnChange","handleOnCancel","event","preventDefault","portfolios","this","setState","onAdd","target","value","onCancel","show","onSubmit","onChange","required","onClick","React","Component","EvolutionGraph","Math","random","toFixed","toString","graphRange","days","replace","dateToday","Date","setDate","getDate","months","setMonth","getMonth","toISOString","slice","years","setFullYear","getFullYear","stocks","showInEuro","euroPerUsd","datesInData","stockNames","graphRangeLimitDate","graphRangeToDate","stock","hasOwnProperty","push","chart","chartKey","close","Number","date","idx","indexOf","dataEntry","aspect","width","height","strokeDasharray","dataKey","map","stockName","key","stroke","generateHslColor","activeDot","r","dot","PureComponent","PortfolioTableRow","handleCheckedChange","e","onRowCheckedChange","stockData","stockInfo","checked","latestPrice","quote","shares","purchase","purchasePrice","price","purchaseCurrency","currency","name","RemoveSelectedBtn","selections","PortfolioTable","selectedRows","handleRowCheckedChange","rows","AddStockModal","purchaseDate","hasErrors","errorMessage","loading","handleOnsubmit","handleCancel","puchasePriceFetcher","then","fetchedPrice","toUpperCase","stockError","dateError","min","isoDate","apiUrl","fetch","response","ok","json","status","jsonData","catch","error","message","rangeOptions","text","Portfolio","showAddStockModal","toggleShowAddStockModal","handleAddStock","onAddStock","portfolio","userPrefs","defaultValue","entry","DEFAULT_USER_PREFS","App","appData","showAddPortfolioModal","toggleShowAddPortfolioModal","handleAddPortfolio","dataFetcher","portfolioName","Object","keys","isoPurchaseDate","todayDate","dayDiff","ceil","janFirst","ytdDiff","dateToChartRange","chartData","className","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cdbf2e3.chunk.js","sourcesContent":["const TOKEN = 'Tpk_391653b184fb45f2a8e9b1270c0306e9';\nconst BASE_URL = 'https://sandbox.iexapis.com/stable/stock/market/batch?';\nconst BASE_URL_DATE = 'https://sandbox.iexapis.com/stable/stock/';\n\nfunction builder(stockSymbols, type, chartRange) {\n    /*\n    Builds the url for fetching stock data from api.\n    - symbolsArr is an array of stock symbols as strings.\n    - range is the timespan as string that should be fetched (1d, 5d, 1m, ...).\n    - type is 'quote' or 'chart'\n     */\n    let url = BASE_URL;\n    const sym = 'symbols=';\n    const typ = '&types=';\n    const ran = '&range=';\n    const fallbackRange = '1y';\n    const tok = '&token=';\n\n    // Append symbols to the url\n    url += sym;\n    for (let i=0; i<stockSymbols.length; i++) {\n        url += stockSymbols[i];\n        // Append ',' after symbol except after last one\n        if (i < stockSymbols.length - 1) {\n            url += ',';\n        }\n    }\n    // Append types to the url\n    url += typ + type;\n    // Append range to the url\n    if (type.includes('chart')) {\n        if (chartRange) { url += ran + chartRange }\n        else { url += ran + fallbackRange }  // Use fallbackRange if no range was provided\n    }\n    // Append token to the url\n    url += tok + TOKEN;\n\n    return url;\n}\n\nfunction builderDate(stockSymbol, yyyymmdd) {\n    /*\n    Builds an url for fetching stock price at a specific date.\n     */\n    let url = BASE_URL_DATE;\n\n    url += stockSymbol;\n    url += '/chart/date/';\n    url += yyyymmdd;\n    url += '?chartByDay=true&token=';\n    url += TOKEN;\n\n    return(url)\n}\n\nexport const urlBuilder = (stockSymbols, type, chartRange) => {\n  return builder(stockSymbols, type, chartRange);\n};\n\nexport const urlBuilderDate = (stockSymbol, yyyymmdd) => {\n    return builderDate(stockSymbol, yyyymmdd);\n};\n","function loader(objName) {\n    /*\n    Loads an JSON object from local storage. Throws error if not found (data=null)\n     */\n    let data = JSON.parse(localStorage.getItem(objName));\n    // Check if null\n    if (!data) {\n        throw new Error(\"Did not find '\" + objName + \"' in local storage\");\n    }\n    return data;\n}\n\nfunction saver(obj, objName) {\n    /*\n    Saves an JSON object to local storage.\n     */\n    localStorage.setItem(objName, JSON.stringify(obj));\n    console.log(\"==> Saved to local storage '\" + objName + \"'\");\n}\n\nexport function dateToChartRange(isoPurchaseDate) {\n    const purchaseDate = new Date(isoPurchaseDate);\n    const todayDate = new Date();\n    const dayDiff = Math.ceil((todayDate - purchaseDate) / (1000 * 60 * 60 * 24));  // Ceil ensures enough days\n    const janFirst = new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n    const ytdDiff = Math.ceil((todayDate - janFirst) / (1000 * 60 * 60 * 24));  // Days since Jan 1 (at most 365)\n\n\n    // graphRange options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n    let chartRange = \"\";\n    console.log(dayDiff);\n\n    if (dayDiff < 5) {\n        // 5 days is enough\n        chartRange = \"5d\";\n        if (ytdDiff < 5) {chartRange = \"ytd\"}\n    }\n    else if (dayDiff < 32) {\n        // 1 month is enough\n        chartRange = \"1m\";\n        if (ytdDiff < 32) {chartRange = \"ytd\"}\n    }\n    else if (dayDiff < 94) {\n        // 3 months is enough\n        chartRange = \"3m\";\n        if (ytdDiff < 94) {chartRange = \"ytd\"}\n    }\n    else if (dayDiff< 168) {\n        chartRange = \"6m\";\n        if (ytdDiff < 168) {chartRange = \"ytd\"}\n    }\n    else if (dayDiff < 367) {\n        chartRange = \"1y\";\n        if (ytdDiff < 367) {chartRange = \"ytd\"}\n    }\n    else if (dayDiff < 732) {\n        chartRange = \"2y\";\n    }\n    else if (dayDiff < 1828) {\n        chartRange = \"5y\";\n    }\n    else {\n        chartRange = \"max\"\n    }\n\n    return chartRange;\n}\n\nexport const loadFromLocalStorage = (objName) => {\n  return loader(objName);\n};\n\nexport const saveToLocalStorage = (obj, objName) => {\n    return saver(obj, objName);\n};","import React from \"react\";\n\nexport class AddPortfolioModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        };\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleOnCancel = this.handleOnCancel.bind(this);\n    }\n    handleOnSubmit(event) {\n        event.preventDefault();\n        // Validate that the name is unique set state and submit\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = this.state.newPortfolioName;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({ submitError: \"Pick another name for your portfolio\" })\n        }\n        else {\n            // Reset state\n            this.setState({\n                newPortfolioName: \"\",\n                submitError: \"\"\n            });\n            // Pass newPortfolioName to parent\n            this.props.onAdd(newPortfolioName);\n        }\n    }\n    handleOnChange(event) {\n        // Validate that the name is unique and set state\n        const portfolios = this.props.portfolios;\n        const newPortfolioName = event.target.value;\n        if (portfolios.includes(newPortfolioName)) {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"You have another portfolio with this name\"\n            })\n        }\n        else {\n            this.setState({\n                newPortfolioName: event.target.value,\n                inputError: \"\",\n                submitError: \"\"\n            })\n        }\n    }\n    handleOnCancel() {\n        this.setState({\n            newPortfolioName: \"\",\n            inputError: \"\",\n            submitError: \"\",\n        });\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            // Should render nothing in the future\n            return <p>Modal hidden</p>;\n        }\n        return (\n            <div>\n                <p>Modal visible</p>\n                <form onSubmit={this.handleOnSubmit}>\n                    <label>\n                        Portfolio name\n                        <input type=\"text\" value={this.state.newPortfolioName} onChange={this.handleOnChange} required/>\n                    </label>\n                    <p>{this.state.inputError}</p>\n                    <p>{this.state.submitError}</p>\n                    <input type=\"submit\" value=\"Add\" />\n                    <button onClick={this.handleOnCancel}>Cancel</button>\n                </form>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line, ResponsiveContainer} from \"recharts\";\nimport {dateToChartRange} from \"./myFunctions\";\n\nexport class EvolutionGraph extends React.PureComponent{\n\n    generateHslColor() {\n        // Generate random hsl color. Ensures the color is visible on the chart\n        const hue = (Math.random() * 360).toFixed(0).toString();\n        const saturation = \"40%\";\n        const lightness = \"70%\";\n        return \"hsl(\" + hue + \",\" + saturation + \",\" + lightness + \")\";\n    }\n\n    graphRangeToDate(graphRange) {\n        // graphRange options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n        if (graphRange.includes(\"d\")) {\n            const days = graphRange.replace(\"d\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'days' number of days in the past and return the new date\n            return new Date(new Date().setDate(dateToday.getDate() - days));\n        }\n        if (graphRange.includes(\"m\")) {\n            const months = graphRange.replace(\"m\", \"\");  // 1m, 3m, 6m\n            const dateToday = new Date();\n            // Set the date to 'months' number of months in the past and return the new date\n            return new Date(new Date().setMonth(dateToday.getMonth() - months));\n        }\n        if (graphRange.includes('ytd')) {\n            // Return a Date object set to 1 Jan of the current year\n            return new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n        }\n        if (graphRange.includes(\"y\")) {\n            const years = graphRange.replace(\"y\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'years' number of years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n        if (graphRange.includes('max')) {\n            const years = 500;\n            const dateToday = new Date();\n            // Set the date 500 years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const graphRange = this.props.graphRange;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        const data = [];\n        let datesInData = [];\n        let stockNames = [];\n\n        // Translate 'graphRange' to number of days\n        const graphRangeLimitDate = this.graphRangeToDate(graphRange);\n\n        // Populate 'data' and 'stockNames' with data in the correct format for the LineChart component\n        for (let stock in stocks) {  // stocks = {aapl: {...}, fb: {...}, ...}\n            if (stocks.hasOwnProperty(stock)) {\n                stockNames.push(stock);\n\n                const chart = stocks[stock].chart;\n                for (let chartKey in chart) {  // chart = {0: {date: --, close: --}, 1: {date: --, close: --}, ...}\n                    if (chart.hasOwnProperty(chartKey)) {\n                        // Close value in correct currency\n                        let close = 0;\n                        if (showInEuro) {\n                            close = Number((chart[chartKey].close * euroPerUsd).toFixed(2));  // .toFixed(2) without casting to Number causes the chart to scale incorrectly (if there are problems in the future).\n                        }\n                        else {\n                            close = chart[chartKey].close\n                        }\n\n                        // Date\n                        const date = chart[chartKey].date;\n\n                        // Filter the dates for the graph (LineChart)\n                        if (new Date(date) >= graphRangeLimitDate) {\n                            // Check if date exist in data\n                            if(!datesInData.includes(date)) {\n                                // Keeping track of what dates are already in data. Easier and faster this way than iterating data\n                                datesInData.push(date);\n\n                                // Create new entry in data. Add first stock's close value\n                                const dataEntry = {};\n                                dataEntry[\"name\"] = date;\n                                dataEntry[stock] = close;  // { name: \"2019-12-16\", FB: 205.12 }\n                                data.push(dataEntry);  // [{ name: \"2019-12-16\", FB: 205.12 }, ...]\n                            }\n                            else {\n                                // The date does already exist in data.\n                                // Add the stocks value to an already existing entry.\n\n                                // data is an array so the values/entries have fixed order.\n                                // the values/entries in data has the exact same order as the dates in datesInData\n                                // (this is because they are added by the above if statement)\n                                const idx = datesInData.indexOf(date);\n                                let dataEntry = data[idx];\n                                dataEntry[stock] = close;\n                                data[idx] = dataEntry;  // keeps the order intact\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return (\n            // Responsive container makes the chart adapt to the sise of the parent container\n            // margin={{top:5, right: 30, left: 20, bottom: 5}}\n            // use type=\"monotone\" in Line to make the graph smooth\n            <div>\n                <ResponsiveContainer aspect={1.7} width={500}>\n                    <LineChart width=\"100%\" height=\"100%\" data={data}>\n                        <CartesianGrid strokeDasharray=\"1 3\"/>\n                        <XAxis dataKey=\"name\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend/>\n                        {stockNames.map(stockName =>\n                            <Line\n                                key={stockName}\n\n                                dataKey={stockName}\n                                stroke={this.generateHslColor()}\n                                activeDot={{ r: 4 }}\n                                dot={false}\n                            />\n                            )\n                        }\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n}","import React from \"react\";\nexport class PortfolioTableRow extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleCheckedChange = this.handleCheckedChange.bind(this);\n    }\n\n    handleCheckedChange(e) {\n        this.props.onRowCheckedChange(e);  // e.target.checked, e.target.name checked = true/false, name = AAPL , FB,...\n    }\n\n    render() {\n        const stock = this.props.stock;\n        const stockData = this.props.stockInfo;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n        const checked = this.props.checked;\n\n        const latestPrice = stockData.quote.latestPrice;\n        const shares = stockData.purchase.shares;\n        const purchasePrice = stockData.purchase.price;\n        const purchaseCurrency = stockData.purchase.currency;\n\n        // See Thinking in react for handling the input button\n        return (\n            <tr>\n                <td>{stock}</td>\n                <td>{showInEuro ? (latestPrice * euroPerUsd).toFixed(2) + \" EUR\" : latestPrice + \" USD\"}</td>\n                <td>{purchasePrice} {purchaseCurrency}</td>\n                <td>{shares}</td>\n                <td>{showInEuro ? (latestPrice * shares * euroPerUsd).toFixed(2) + \" EUR\" : (latestPrice * shares).toFixed(2) + \" USD\"}</td>\n                <td><input name={stock} type=\"checkbox\" checked={checked} onChange={this.handleCheckedChange}/></td>\n            </tr>\n        );\n    }\n}","import React from \"react\";\n\nexport class RemoveSelectedBtn extends React.Component {\n    render() {\n        const selections = this.props.selections;\n        return (\n            <button>Remove selected stocks</button>\n        )\n    }\n}","import React from \"react\";\nimport {PortfolioTableRow} from \"./PortfolioTableRow\";\nimport {RemoveSelectedBtn} from \"./RemoveSelectedBtn\";\n\nexport class PortfolioTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // *******************************************************\n            // NOTE: This is a derived state and should not be used.\n            // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n            // Atm i will continue with this and review it later.\n            // Using double negation will convert undefined/null to\n            // false and temporarily fix the problem of the state not\n            // being set at the initial render when passing\n            // checked={!!this.state.selectedRows[stock]} to the\n            // component <PortfolioTableRow/>\n            // *******************************************************\n            selectedRows: [],  // [AAPL: true, FB: false, TWTR: true, ...]\n        };\n        this.handleRowCheckedChange = this.handleRowCheckedChange.bind(this);\n    }\n\n    componentDidMount() {\n        // Populate initial state after component mount. Set all rows not checked.\n        const stocks = this.props.stocks;\n        let selectedRows = [];\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                selectedRows[stock] = false;\n            }\n        }\n        this.setState({ selectedRows: selectedRows });\n    }\n\n    handleRowCheckedChange(event) {\n        // Extract stock name and whether the <input ... /> is checked\n        const stock = event.target.name;  // event.target is the <input ... /> element in PortfolioTableRow\n        const checked = event.target.checked;\n\n        // Update the state\n        let selectedRows = this.state.selectedRows;\n        selectedRows[stock] = checked;\n        this.setState({ selectedRows: selectedRows });\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const showInEuro = this.props.showInEuro;\n        const euroPerUsd = this.props.euroPerUsd;\n\n        let rows = [];\n        for (let stock in stocks) {\n            if (stocks.hasOwnProperty(stock)) {\n                rows.push(\n                    <PortfolioTableRow\n                        key={stock}\n                        stock={stock}\n                        stockInfo={stocks[stock]}\n                        showInEuro={showInEuro}\n                        euroPerUsd={euroPerUsd}\n                        checked={!!this.state.selectedRows[stock]}\n                        onRowCheckedChange={this.handleRowCheckedChange}\n                    />\n                );\n            }\n        }\n\n        return (\n            <div>\n                <RemoveSelectedBtn selections={this.state.selections} />\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Stock</th>\n                        <th>Latest Price</th>\n                        <th>Purchase Price</th>\n                        <th>Shares</th>\n                        <th>Total</th>\n                        <th>Select</th>\n                    </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {urlBuilderDate} from \"./api\";\n\nexport class AddStockModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            shares: \"\",\n            hasErrors: false,\n            errorMessage: \"\",\n            loading: false,\n        };\n        this.handleOnsubmit = this.handleOnsubmit.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    handleOnsubmit(event) {\n        event.preventDefault();\n\n        const stockSymbol = this.state.stockSymbol;\n        const purchaseDate = this.state.purchaseDate;\n        const shares = this.state.shares;\n\n        console.log(\"==> Adding stock '\" + stockSymbol + \"'\");\n\n        let purchasePrice = null;\n        this.setState(\n            { loading: true },\n            () => {\n                // Fetch purchase price from API\n                let puchasePriceFetcher = this.puchasePriceFetcher(stockSymbol, purchaseDate);  // Returns a promise\n                puchasePriceFetcher.then(fetchedPrice => {\n                    if (!this.state.hasErrors) {\n                        purchasePrice = fetchedPrice;\n                        this.props.onAdd(stockSymbol, purchaseDate, purchasePrice, shares);\n                    }\n                    this.setState({\n                        hasErrors: false,\n                        loading: false,\n                    });\n                })\n                // Errors are already caught in purchasePriceFetcher so no need to do it here\n            }\n        );\n\n    }\n    handleOnChange(event) {\n        if (event.target.name === \"stockSymbol\") {\n            this.setState({ stockSymbol: event.target.value.toUpperCase() });\n        }\n        if (event.target.name === \"purchaseDate\") {\n            this.setState({ purchaseDate: event.target.value })\n        }\n        if (event.target.name === \"shares\") {\n            this.setState({ shares: event.target.value })\n        }\n    }\n    handleCancel() {\n        // Reset state\n        this.setState({\n            stockSymbol: \"\",\n            purchaseDate: \"\",\n            stockError: \"\",\n            dateError: \"\",\n        });\n        // Action\n        this.props.onCancel();\n    }\n    render() {\n        if (!this.props.show) {\n            // TODO: Should render nothing in the future\n            return <p>Modal hidden</p>\n        }\n        if (this.state.loading) {\n            // Loading while fetching data\n            return (\n                <p>Loading ...</p>\n            )\n        }\n        return (\n            <div>\n                <p>Modal visible</p>\n                <form onSubmit={this.handleOnsubmit}>\n                    <label>\n                        Stock symbol\n                        <input type=\"text\" name=\"stockSymbol\" value={this.state.stockSymbol} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Date of purchase\n                        <input type=\"date\" name=\"purchaseDate\" value={this.state.purchaseDate} onChange={this.handleOnChange} required/>\n                    </label>\n                    <label>\n                        Number of shares\n                        <input type=\"number\" min=\"1\" name=\"shares\" value={this.state.shares} onChange={this.handleOnChange} required/>\n                    </label>\n                    <input type=\"submit\" value=\"Add\"/>\n                </form>\n                <p>{this.state.errorMessage}</p>\n                <button onClick={this.handleCancel}>Cancel</button>\n            </div>\n        )\n    }\n    puchasePriceFetcher(stockSymbol, isoDate) {\n        // isoDate should be of format YYYY-MM-DD as returned by the <input type=\"date />\n        const yyyymmdd = isoDate.replace(/-/g, \"\");\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    // API returns an empty json if the stock symbol is valid but there is no available data.\n                    return response.json()  // returns 'undefined' if json from api is empty\n                }\n                if (response.status === 404) {\n                    // API throws 404 if stock symbol is unknown\n                    throw new Error(\"Unknown stock symbol\");\n                }\n                else {\n                    // All other errors\n                    throw new Error(\"Error while fetching from api ...\");\n                }\n            })\n            .then(jsonData => {\n                // The API returns an empty json if the stock symbol is valid but there is no available data.\n                if (jsonData.length > 0) {\n                    return jsonData[0].close;\n                }\n                else {\n                    throw new Error(\"No available stock data for that date. Either the exchange was closed that day (e.g. weekend) or the date is too far in the past.\");\n                }\n            })\n            .catch(error => {\n                // Handle errors\n                console.log(\"==>\", error.message);\n                this.setState({\n                    hasErrors: true,\n                    errorMessage : error.message\n                });\n            })\n    }\n}","import React from \"react\";\nimport {EvolutionGraph} from \"./EvolutionGraph\";\nimport {PortfolioTable} from \"./PortfolioTable\";\nimport {AddStockModal} from \"./AddStockModal\";\n\nconst rangeOptions = [\n    {value: \"5d\", text: \"5 days\",},\n    {value: \"1m\", text: \"1 month\"},\n    {value: \"3m\", text: \"3 months\"},\n    {value: \"6m\", text: \"6 months\"},\n    {value: \"ytd\", text: \"This year\"},\n    {value: \"1y\", text: \"1 year\"},\n    {value: \"2y\", text: \"2 years\"},\n    {value: \"5y\", text: \"5 years\"},\n    {value: \"max\", text: \"Maximum available\"}\n];\n\nconst euroPerUsd = 0.90;  // Later change this to API call\n\nexport class Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAddStockModal: false,\n        };\n        this.toggleShowAddStockModal = this.toggleShowAddStockModal.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n    }\n    toggleShowAddStockModal() {\n        this.setState({ showAddStockModal: !this.state.showAddStockModal });\n    }\n    handleAddStock(stockSymbol, purchaseDate, purchasePrice, shares) {\n        this.toggleShowAddStockModal();\n        this.props.onAddStock(this.props.name, stockSymbol, purchaseDate, purchasePrice, shares);\n    }\n    render() {\n        // Prevent errors when initial (and maybe also other asynchronous) render happen before userPrefs and name are set in appData.\n        if (typeof this.props.name === 'undefined' ||\n            typeof this.props.portfolio === 'undefined' ||\n            typeof this.props.portfolio.userPrefs === 'undefined'\n        ) {\n            return <p>Loading ...</p>\n        }\n        const name = this.props.name;\n        const stocks = this.props.portfolio.stocks;\n        const showInEuro = this.props.portfolio.userPrefs.showInEuro;\n        const graphRange = this.props.portfolio.userPrefs.graphRange;\n\n        // For handling button press read https://reactjs.org/docs/handling-events.html\n\n        return (\n            <div>\n                <h2>{name}</h2>\n                <button>\n                    {showInEuro ? \"USD\" : \"EUR\" }\n                </button>\n                <button>\n                    Refresh/Update\n                </button>\n                <div>\n                    <EvolutionGraph stocks={stocks} graphRange={graphRange} showInEuro={showInEuro} euroPerUsd={euroPerUsd}/>\n                    <select defaultValue={graphRange}>\n                        {rangeOptions.map(entry => {\n                            return <option key={entry.value} value={entry.value}>{entry.value}</option>\n                        })}\n                    </select>\n                </div>\n                <button\n                    onClick={this.toggleShowAddStockModal}>\n                    Add stock\n                </button>\n                <AddStockModal\n                    show={this.state.showAddStockModal}\n                    onCancel={this.toggleShowAddStockModal}\n                    onAdd={this.handleAddStock}>\n                    \"I am a child of this modal\"\n                </AddStockModal>\n                <PortfolioTable\n                    stocks={stocks}\n                    showInEuro={showInEuro}\n                    euroPerUsd={euroPerUsd}\n                />\n                <button>\n                    Remove portfolio\n                </button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport {urlBuilder, urlBuilderDate} from \"./api\";\nimport {dateToChartRange, loadFromLocalStorage, saveToLocalStorage} from \"./myFunctions\";\nimport {AddPortfolioModal} from './AddPortfolioModal'\nimport {Portfolio} from \"./Portfolio\";\n\nconst LOCALSTORAGE_APPDATA_NAME = 'appData';\nconst DEFAULT_USER_PREFS = {showInEuro: false, graphRange: \"6m\"};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appData: {},  // All data\n            showAddPortfolioModal: false,\n            loading: false,\n        };\n        this.toggleShowAddPortfolioModal = this.toggleShowAddPortfolioModal.bind(this);\n        this.handleAddPortfolio = this.handleAddPortfolio.bind(this);\n        this.handleAddStock = this.handleAddStock.bind(this);\n    }\n\n    // Fetches latest quote and/or chart (historic data) for all stockSymbols\n    dataFetcher(stockSymbols, type, chartRange) {\n        const apiUrl = urlBuilder(stockSymbols, type, chartRange);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                return jsonData;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n    puchasePriceFetcher(stockSymbol, yyyymmdd) {\n        const apiUrl = urlBuilderDate(stockSymbol, yyyymmdd);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                return jsonData[0].close;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    createAndAppendDummyPortfolio(newPortfolioName, stockSymbols, type, chartRange) {\n        /*\n        Creates and appends a whole portfolio at once (with dummy 'purchase' element) to the appData state\n        */\n        console.log(\"==> Creating dummy portfolio '\" + newPortfolioName + \"'\");\n        // dataFetcher uses fetch() so it returns a promise. Therefore newPortfolio.then() to access the result value.\n        const newPortfolio = this.dataFetcher(stockSymbols, type, chartRange);\n        newPortfolio.then(stockData =>\n            {\n                // Add dummy purchase data\n                for (let key in stockData) {\n                    if (stockData.hasOwnProperty(key)) {\n                        stockData[key][\"purchase\"] = {date: \"1970-01-01\", price: 10.00, shares: 7, currency: \"USD\"};\n                    }\n                }\n                // Add portfolio to appData\n                let appData = this.state.appData;\n                appData[newPortfolioName] = {\"stocks\": stockData};\n                // Add currency and graph visualisation range preference\n                appData[newPortfolioName][\"userPrefs\"] = {showInEuro: false, graphRange: \"6m\"};\n                // Set state\n                this.setState(\n                    { appData: appData },\n                    () => {\n                        console.log(\"==> State set. Dummy purchase data added to\" + newPortfolioName);\n                        saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                    }\n                )\n            }\n        );\n    }\n\n    refreshPortfolio(portfolioName) {\n        /*\n        Refresh portfolio data (called on button press)\n        */\n        console.log(\"==> Refreshing portfolio data '\" + portfolioName + \"'\");\n\n        // Copy current portfolio\n        let appData = this.state.appData;\n\n        const stockSymbols = Object.keys(appData[portfolioName].stocks);\n        const type = \"quote,chart\";  // These are the types the application always and only show\n        const chartRange = \"5d\";  // Later improvement to only fetch the missing data to save loading time and server time (power)\n\n        let newStockData = this.dataFetcher(stockSymbols, type, chartRange);\n        newStockData.then(stockData => {\n            for (let stock in stockData) {\n                if (stockData.hasOwnProperty(stock)) {\n                    // Overwrite old stock data\n                    appData[portfolioName].stocks[stock].chart = stockData[stock].chart;\n                }\n            }\n            console.log(\"==> Refreshed portfolio:\" , appData[portfolioName]);\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> Set state with newStockData and range 5d !!!!!!!!!!!!!!!!\");\n                    saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                }\n            );\n        });\n    }\n\n    componentDidMount() {\n        /*\n        FIRST TRY LOADING DATA FROM LOCAL STORAGE.\n        IF THERE IS NOTHING IN LOCAL STORAGE THEN LOAD FROM INTERNET (BUT ONLY ON USER INPUT REFRESH/GET/ADD BUTTON)\n         */\n        console.log(\"==> componentDidLoad\");\n        // Load array of portfolio names and all app data from local storage. Throws error if not found and fails silently outputting error only to console.\n        try {\n            const appData = loadFromLocalStorage(LOCALSTORAGE_APPDATA_NAME);  // Trows error if not found\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> State set. Loaded 'portfolios' and 'appData' from local storage\");\n                    console.log(\"==> appData:\", this.state.appData)\n                }\n            );\n        }\n        catch (error) {\n            console.log(\"==>\", error);\n            // *** CREATE DUMMY DATA. DO NOT USE IN PRODUCTION ***\n            /*\n            console.log(\"==> Creating dummy data\");\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio 2\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio 3\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n             */\n\n        }\n    }\n\n    toggleShowAddPortfolioModal() {\n        this.setState({ showAddPortfolioModal: !this.state.showAddPortfolioModal });\n    };\n    handleAddPortfolio(newPortfolioName) {\n        // Hide the modal\n        this.toggleShowAddPortfolioModal();\n        // Create new portfolio with no stocks default user preferences.\n        console.log(\"==> Creating new portfolio '\" + newPortfolioName + \"'\");\n        let appData = this.state.appData;\n        appData[newPortfolioName] = {\"userPrefs\": DEFAULT_USER_PREFS};\n        appData[newPortfolioName][\"stocks\"] = {};\n        this.setState(\n            {appData: appData},\n            () => {\n                console.log(\"==> Created new portfolio '\" + newPortfolioName + \"'\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    handleAddStock(portfolioName, stockSymbol, purchaseDate, purchasePrice, shares) {\n        // Add a new stock to the portfolio in appData and save to local storage.\n        console.log(\"==> Adding stock to\", portfolioName, stockSymbol, purchaseDate, purchasePrice, shares);\n\n        // Calculate the needed chartRange\n        const chartRange = dateToChartRange(purchaseDate);\n        // Fetch chart and quota data.\n        const type = 'quote,chart';\n\n        let dataFetcher = this.dataFetcher([stockSymbol], type, chartRange);\n        dataFetcher.then(stockData => {\n            const stockSymbol = Object.keys(stockData)[0];  // exact same as stockSymbol\n\n            // Clean the data for a smaller storage footprint\n\n            // Get only the necessary quote data\n            let quote = {};\n            quote[\"companyName\"] = stockData[stockSymbol].quote[\"companyName\"];\n            quote[\"latestPrice\"] = stockData[stockSymbol].quote[\"latestPrice\"];\n\n            // Get only the necessary chart data\n            let chart = {};\n            const chartData = stockData[stockSymbol].chart;\n            for (let key in chartData) {\n                if (chartData.hasOwnProperty(key)) {\n                    chart[key] = {\"date\": chartData[key].date, \"close\": chartData[key].close};\n                }\n            }\n\n            // Purchase info\n            const purchase = {date: purchaseDate, price: purchasePrice, shares: shares, currency: \"USD\"};  // default currency \"USD\"\n\n            // Add quote, chart and purchase to existing portfolio\n            let appData = this.state.appData;\n            appData[portfolioName].stocks[stockSymbol] = {\"quote\": quote, \"chart\": chart, \"purchase\": purchase};\n\n            // Set state and save to local storage\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> State set. Stock data added to '\" + portfolioName + \"'\");\n                    saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                }\n            )\n        });\n    }\n\n    render() {\n        console.log(\"==> App render\");\n\n        // Get list of portfolios from appData\n        const appData = this.state.appData;\n        let portfolios = [];\n        for (let portfolioName in appData) {\n            if (appData.hasOwnProperty(portfolioName)) {\n                portfolios.push(portfolioName);\n            }\n        }\n\n        // Render portfolios and 'add portfolio' button\n        return (\n            <div className=\"App\">\n                <h1>SPMS</h1>\n                <a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>\n                <p>15 minute delay in price</p>\n                <button\n                    onClick={this.toggleShowAddPortfolioModal}>\n                    Add portfolio\n                </button>\n                <AddPortfolioModal\n                    show={this.state.showAddPortfolioModal}\n                    onCancel={this.toggleShowAddPortfolioModal}\n                    onAdd={this.handleAddPortfolio}\n                    portfolios={portfolios}>\n                    \"We are the children of this modal\"\n                </AddPortfolioModal>\n                {portfolios.map(portfolioName =>\n                    // Pass portfolio name and portfolio data to the portfolio\n                    <Portfolio\n                        key={portfolioName}\n                        name={portfolioName}\n                        portfolio={appData[portfolioName]}\n                        onAddStock={this.handleAddStock}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}