{"version":3,"sources":["api.js","myFunctions.js","AddPortfolioButton.js","PortfolioTableRow.js","EvolutionGraph.js","RemoveSelectedBtn.js","PortfolioTable.js","Portfolio.js","App.js","index.js"],"names":["TOKEN","BASE_URL","urlBuilder","stockSymbols","type","chartRange","url","i","length","includes","ran","builder","loadFromLocalStorage","objName","data","JSON","parse","localStorage","getItem","Error","loader","saveToLocalStorage","obj","setItem","stringify","saver","AddPortfolioButton","React","Component","PortfolioTableRow","stock","this","props","stockData","stockInfo","showInEuro","latestPrice","quote","shares","purchase","purchasePrice","price","purchaseCurrency","currency","String","toFixed","EvolutionGraph","Math","random","toString","graphRange","days","replace","dateToday","Date","setDate","getDate","months","setMonth","getMonth","toISOString","slice","years","setFullYear","getFullYear","stocks","stockNames","graphRangeLimitDate","graphRangeToDate","hasOwnProperty","push","chart","dataKey","chartKey","date","close","dataEntry","aspect","width","height","margin","top","right","left","bottom","strokeDasharray","map","stockName","key","stroke","generateHslColor","activeDot","r","dot","PureComponent","RemoveSelectedBtn","selections","PortfolioTable","state","rows","rangeOptions","value","text","Portfolio","name","portfolio","userPrefs","defaultValue","entry","App","appData","loading","apiUrl","fetch","then","response","ok","json","jsonData","catch","error","setState","newPortfolioName","console","log","toPortfolio","newStockName","toStock","newObjectWithData","addPurchase","existingPortfolioContent","dataFetcher","portfolioName","Object","keys","createAndAppendDummyPortfolio","portfolios","className","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2603fadf.chunk.js","sourcesContent":["const TOKEN = 'Tpk_391653b184fb45f2a8e9b1270c0306e9';\nconst BASE_URL = 'https://sandbox.iexapis.com/stable/stock/market/batch?';\n\nfunction builder(stockSymbols, type, chartRange) {\n    /*\n    Builds the url for fetching stock data from api.\n    - symbolsArr is an array of stock symbols as strings.\n    - range is the timespan as string that should be fetched (1d, 5d, 1m, ...).\n    - type is 'quote' or 'chart'\n     */\n    let url = BASE_URL;\n    const sym = 'symbols=';\n    const typ = '&types=';\n    const ran = '&range=';\n    const fallbackRange = '1y';\n    const tok = '&token=';\n\n    // Append symbols to the url\n    url += sym;\n    for (let i=0; i<stockSymbols.length; i++) {\n        url += stockSymbols[i];\n        // Append ',' after symbol except after last one\n        if (i < stockSymbols.length - 1) {\n            url += ',';\n        }\n    }\n    // Append types to the url\n    url += typ + type;\n    // Append range to the url\n    if (type.includes('chart')) {\n        if (chartRange) { url += ran + chartRange }\n        else { url += ran + fallbackRange }  // Use fallbackRange if no range was provided\n    }\n    // Append token to the url\n    url += tok + TOKEN;\n\n    return url;\n}\n\nexport const urlBuilder = (stockSymbols, type, chartRange) => {\n  return builder(stockSymbols, type, chartRange);\n};\n","function loader(objName) {\n    /*\n    Loads an JSON object from local storage. Throws error if not found (data=null)\n     */\n    let data = JSON.parse(localStorage.getItem(objName));\n    // Check if null\n    if (!data) {\n        throw new Error(\"Did not find '\" + objName + \"' in local storage\");\n    }\n    return data;\n}\n\nfunction saver(obj, objName) {\n    /*\n    Saves an JSON object to local storage.\n     */\n    localStorage.setItem(objName, JSON.stringify(obj));\n}\n\nexport const loadFromLocalStorage = (objName) => {\n  return loader(objName);\n};\n\nexport const saveToLocalStorage = (obj, objName) => {\n    return saver(obj, objName);\n};","import React from \"react\";\n\nexport class AddPortfolioButton extends React.Component {\n    render() {\n        return (\n            <button>Add Portfolio</button>\n        );\n    }\n}","import React from \"react\";\nexport class PortfolioTableRow extends React.Component{\n    render() {\n        const stock = this.props.stock;\n        const stockData = this.props.stockInfo;\n        const showInEuro = this.props.showInEuro;\n        const latestPrice = stockData.quote.latestPrice;\n        const shares = stockData.purchase.shares;\n        const purchasePrice = stockData.purchase.price;\n        const purchaseCurrency = stockData.purchase.currency;\n        // See Thinking in react for handling the input button\n        return (\n            <tr>\n                <td>{stock}</td>\n                <td>{latestPrice} {showInEuro ? \"EUR\" : \"USD\"}</td>\n                <td>{purchasePrice} {purchaseCurrency}</td>\n                <td>{shares}</td>\n                <td>{String((latestPrice * shares).toFixed(3))} {showInEuro ? \"EUR\" : \"USD\"}</td>\n                <td><input type=\"checkbox\"/></td>\n            </tr>\n        );\n    }\n}","import React from \"react\";\nimport {LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line, ResponsiveContainer} from \"recharts\";\n\nexport class EvolutionGraph extends React.PureComponent{\n\n    generateHslColor() {\n        // Generate random hsl color. Ensures the color is visible on the chart\n        const hue = (Math.random() * 360).toFixed(0).toString();\n        const saturation = \"40%\";\n        const lightness = \"70%\";\n        return \"hsl(\" + hue + \",\" + saturation + \",\" + lightness + \")\";\n    }\n\n    graphRangeToDate(graphRange) {\n        // graphRange options are 5d, 1m, 3m, 6m, ytd, 1y, 2y, 5y, max\n        if (graphRange.includes(\"d\")) {\n            const days = graphRange.replace(\"d\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'days' number of days in the past and return the new date\n            return new Date(new Date().setDate(dateToday.getDate() - days));\n        }\n        if (graphRange.includes(\"m\")) {\n            const months = graphRange.replace(\"m\", \"\");  // 1m, 3m, 6m\n            const dateToday = new Date();\n            // Set the date to 'months' number of months in the past and return the new date\n            return new Date(new Date().setMonth(dateToday.getMonth() - months));\n        }\n        if (graphRange.includes('ytd')) {\n            // Return a Date object set to 1 Jan of the current year\n            return new Date(new Date().toISOString().slice(0,4));  // new Date(\"2019\") returns 1 Jan 2019\n        }\n        if (graphRange.includes(\"y\")) {\n            const years = graphRange.replace(\"y\", \"\");\n            const dateToday = new Date();\n            // Set the date to 'years' number of years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n        if (graphRange.includes('max')) {\n            const years = 500;\n            const dateToday = new Date();\n            // Set the date 500 years in the past and return the new date\n            return new Date(new Date().setFullYear(dateToday.getFullYear() - years));\n        }\n    }\n\n    render() {\n        const stocks = this.props.stocks;\n        const graphRange = this.props.graphRange;\n\n        const data = [];\n        let stockNames = [];\n\n        // const dateToday = new Date(new Date().toISOString().slice(0,10));\n        // const oneDayInMS = 24 * 60 * 60 * 1000;  // number of milliseconds in one day (24 hrs)\n\n        // Translate 'graphRange' to number of days\n        const graphRangeLimitDate = this.graphRangeToDate(graphRange);\n\n        // Populate 'data' and 'stockNames' with data in the correct format for the LineChart component\n        for (let stock in stocks) {  // stock = aapl, fb, ...\n            if (stocks.hasOwnProperty(stock)) {\n                stockNames.push(stock);\n\n                const chart = stocks[stock].chart;\n                let dataKey = 0;\n                for (let chartKey in chart) {  // key = 0, 1, 2, ...\n                    if (chart.hasOwnProperty(chartKey)) {\n                        const date = chart[chartKey].date;\n                        const close = chart[chartKey].close;\n\n                        // Filter the dates for the graph (LineChart)\n                        if (new Date(date) >= graphRangeLimitDate) {\n                            if (dataKey in data) {\n                                // Add another stock's close value to existing entry (created in previous iterations)\n                                const dataEntry = data[dataKey];\n                                dataEntry[stock] = close;  // { name: \"2019-12-16\", FB: 205.12, AAPL: 123.45 }\n                                data[dataKey] = dataEntry;\n                            }\n                            else {\n                                // Create new entry. Add first stock's close value\n                                const dataEntry = {};\n                                dataEntry[\"name\"] = date;\n                                dataEntry[stock] = close;  // { name: \"2019-12-16\", FB: 205.12 }\n                                data.push(dataEntry);  // [{ name: \"2019-12-16\", FB: 205.12 }, { name: \"2019-12-16\", FB: 205.12 }, ...]\n                            }\n                            dataKey++;\n                        }\n                    }\n                }\n            }\n        }\n\n        return (\n            // Responsive container makes the chart adapt to the sise of the parent container\n            <div>\n                <ResponsiveContainer aspect={1.7} width={500}>\n                    <LineChart width=\"100%\" height=\"100%\" data={data} margin={{top:5, right: 30, left: 20, bottom: 5}}>\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                        <XAxis dataKey=\"name\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend/>\n                        {stockNames.map(stockName =>\n                            <Line\n                                key={stockName}\n                                type=\"monotone\"\n                                dataKey={stockName}\n                                stroke={this.generateHslColor()}\n                                activeDot={{ r: 4 }}\n                                dot={false}\n                            />\n                            )\n                        }\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nexport class RemoveSelectedBtn extends React.Component {\n    render() {\n        const selections = this.props.selections;\n        return (\n            <button>Remove selected stocks</button>\n        )\n    }\n}","import React from \"react\";\nimport {PortfolioTableRow} from \"./PortfolioTableRow\";\nimport {RemoveSelectedBtn} from \"./RemoveSelectedBtn\";\n\nexport class PortfolioTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selections: null,\n        }\n    }\n    render() {\n        const stocks = this.props.stocks;\n        const showInEuro = this.props.showInEuro;\n\n        let rows = [];\n        for (let key in stocks) {\n            if (stocks.hasOwnProperty(key)) {\n                rows.push(\n                    <PortfolioTableRow key={key} stock={key} stockInfo={stocks[key]} showInEuro={showInEuro}/>\n                );\n            }\n        }\n        return (\n            <div>\n                <RemoveSelectedBtn selections={this.state.selections} />\n                <table>\n                    <thead>\n                    <tr>\n                        <th>Stock</th>\n                        <th>Latest Price</th>\n                        <th>Purchase Price</th>\n                        <th>Shares</th>\n                        <th>Total</th>\n                        <th>Select</th>\n                    </tr>\n                    </thead>\n                    <tbody>{rows}</tbody>\n                </table>\n            </div>\n    )\n    }\n}","import React from \"react\";\nimport {PortfolioTableRow} from \"./PortfolioTableRow\";\nimport {EvolutionGraph} from \"./EvolutionGraph\";\nimport {PortfolioTable} from \"./PortfolioTable\";\n\nconst rangeOptions = [\n    {value: \"5d\", text: \"5 days\",},\n    {value: \"1m\", text: \"1 month\"},\n    {value: \"3m\", text: \"3 months\"},\n    {value: \"6m\", text: \"6 months\"},\n    {value: \"ytd\", text: \"This year\"},\n    {value: \"1y\", text: \"1 year\"},\n    {value: \"2y\", text: \"2 years\"},\n    {value: \"5y\", text: \"5 years\"},\n    {value: \"max\", text: \"Maximum available\"}\n];\n\nconst euroPerUsd = 0.90;  // Later change this to API call\n\nexport class Portfolio extends React.Component {\n    render() {\n        // Props\n        const name = this.props.name;\n        const stocks = this.props.portfolio.stocks;\n        const showInEuro = this.props.portfolio.userPrefs.showInEuro;\n        const graphRange = this.props.portfolio.userPrefs.graphRange;\n\n        // For handling button press read https://reactjs.org/docs/handling-events.html\n\n        return (\n            <div>\n                <h2>{name}</h2>\n                <button>\n                    {showInEuro ? \"USD\" : \"EUR\" }\n                </button>\n                <div>\n                    <EvolutionGraph stocks={stocks} graphRange={graphRange}/>\n                    <select defaultValue={graphRange}>\n                        {rangeOptions.map(entry => {\n                            return <option key={entry.value} value={entry.value}>{entry.value}</option>\n                        })}\n                    </select>\n                </div>\n                <button>Add stock</button>\n                <PortfolioTable stocks={stocks} showInEuro={showInEuro}/>\n                <button>Remove portfolio</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport {urlBuilder} from \"./api\";\nimport {loadFromLocalStorage, saveToLocalStorage} from \"./myFunctions\";\nimport {AddPortfolioButton} from './AddPortfolioButton'\nimport {Portfolio} from \"./Portfolio\";\n\nconst LOCALSTORAGE_APPDATA_NAME = 'appData';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appData: {},  // All data\n            loading: false,\n        };\n    }\n\n    // Fetches latest quote and/or chart (historic data) for all stockSymbols\n    dataFetcher(stockSymbols, type, chartRange) {\n        const apiUrl = urlBuilder(stockSymbols, type, chartRange);\n        return fetch(apiUrl)\n            .then(response => {\n                // \"Parse\" json\n                if (response.ok) {\n                    return response.json()\n                } else {\n                    throw new Error(\"Error while fetching from api...\")\n                }\n            })\n            .then(jsonData => {\n                return jsonData;\n            })\n            .catch(error => this.setState({error: error}));\n    }\n\n    // *** METHODS TO MANIPULATE THE STATE ***\n    addEmptyPortfolio(newPortfolioName) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty portfolio to appData\n        appData[newPortfolioName] = {};\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty portfolio added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n            );\n    }\n    addEmptyStock(toPortfolio, newStockName) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty stock to portfolio\n        appData[toPortfolio][newStockName] = {};\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty stock added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addEmptyChart(toPortfolio, toStock) {\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty chart to stock\n        appData[toPortfolio][toStock][\"chart\"] = [];\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new empty chart added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addChartElement(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", open: 29.99, ...}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add element to chart\n        appData[toPortfolio][toStock][\"chart\"].push(newObjectWithData);\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new chart element added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addQuote(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", open: 29.99, ...}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty quote to stock\n        appData[toPortfolio][toStock][\"quote\"] = newObjectWithData;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new quote added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addPurchase(toPortfolio, toStock, newObjectWithData) {\n        /*\n        newObjectWithData should be like {date: \"1994-02-16\", price: 29.99}\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add purchase info to stock\n        appData[toPortfolio][toStock][\"purchase\"] = newObjectWithData;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> new purchase added\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n            }\n        );\n    }\n    addDummyPurchase(toPortfolio) {\n        // Get appData from state\n        let appData = this.state.appData[toPortfolio];\n        for (let key in appData) {\n            if (appData.hasOwnProperty(key)) {\n                const dummy = {date: \"1970-01-01\", price: 10.00, shares: 10};\n                this.addPurchase(toPortfolio, key, dummy)\n            }\n        }\n    }\n\n    appendPortfolio(newPortfolioName, existingPortfolioContent) {\n        /*\n        Append a whole existing portfolio at once to the appData state\n         */\n        // Get appData from state\n        let appData = this.state.appData;\n        // Add empty portfolio to appData\n        appData[newPortfolioName] = existingPortfolioContent;\n        // Set new state\n        this.setState(\n            { appData: appData },\n            () => {\n                console.log(\"==> appended portfolio\");\n                console.log(\"==> Saving to local storage\");\n                saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);            }\n        );\n    }\n\n    createAndAppendDummyPortfolio(newPortfolioName, stockSymbols, type, chartRange) {\n        /*\n        Creates and appends a whole portfolio at once (with dummy 'purchase' element) to the appData state\n        */\n        console.log(\"==> Creating dummy portfolio '\" + newPortfolioName + \"'\");\n        // dataFetcher uses fetch() so it returns a promise. Therefore newPortfolio.then() to access the result value.\n        const newPortfolio = this.dataFetcher(stockSymbols, type, chartRange);\n        newPortfolio.then(stockData =>\n            {\n                // Add dummy purchase data\n                for (let key in stockData) {\n                    if (stockData.hasOwnProperty(key)) {\n                        stockData[key][\"purchase\"] = {date: \"1970-01-01\", price: 10.00, shares: 7, currency: \"USD\"};\n                    }\n                }\n                // Add portfolio to appData\n                let appData = this.state.appData;\n                appData[newPortfolioName] = {\"stocks\": stockData};\n                // Add currency and graph visualisation range preference\n                appData[newPortfolioName][\"userPrefs\"] = {showInEuro: false, graphRange: \"6m\"};\n                // Set state\n                this.setState(\n                    { appData: appData },\n                    () => {\n                        console.log(\"==> State set. Dummy purchase data added to\" + newPortfolioName);\n                        saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                    }\n                )\n            }\n        );\n    }\n\n    refreshPortfolio(portfolioName) {\n        /*\n        Refresh portfolio data (called on button press)\n        */\n        console.log(\"==> Refreshing portfolio data '\" + portfolioName + \"'\");\n\n        // Copy current portfolio\n        let appData = this.state.appData;\n\n        const stockSymbols = Object.keys(appData[portfolioName].stocks);\n        const type = \"quote,chart\";  // These are the types the application always and only show\n        const chartRange = \"5d\";  // Later improvement to only fetch the missing data to save loading time and server time (power)\n\n        let newStockData = this.dataFetcher(stockSymbols, type, chartRange);\n        newStockData.then(stockData => {\n            for (let stock in stockData) {\n                if (stockData.hasOwnProperty(stock)) {\n                    // Overwrite old stock data\n                    appData[portfolioName].stocks[stock].chart = stockData[stock].chart;\n                }\n            }\n            console.log(\"==> Refreshed portfolio:\" , appData[portfolioName]);\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> Set state with newStockData and range 5d !!!!!!!!!!!!!!!!\");\n                    saveToLocalStorage(this.state.appData, LOCALSTORAGE_APPDATA_NAME);\n                }\n            );\n        });\n    }\n\n    componentDidMount() {\n        /*\n        FIRST TRY LOADING DATA FROM LOCAL STORAGE.\n        IF THERE IS NOTHING IN LOCAL STORAGE THEN LOAD FROM INTERNET (BUT ONLY ON USER INPUT REFRESH/GET/ADD BUTTON)\n         */\n\n        // Load array of portfolio names and all app data from local storage. Throws error if not found and fails silently outputting error only to console.\n        try {\n            const appData = loadFromLocalStorage(LOCALSTORAGE_APPDATA_NAME);  // Trows error if not found\n            this.setState(\n                { appData: appData },\n                () => {\n                    console.log(\"==> State set. Loaded 'portfolios' and 'appData' from local storage\");\n                    console.log(\"==> appData:\", this.state.appData)\n                }\n            );\n        }\n        catch (error) {\n            console.log(\"==>\", error);\n            // *** CREATE DUMMY DATA. DO NOT USE IN PRODUCTION ***\n            console.log(\"==> Creating dummy data\");\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio 2\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n            this.createAndAppendDummyPortfolio(\"My Big Portfolio 3\", [\"AAPL\",\"GOOGL\",\"TWTR\",\"FB\"], 'quote,chart', 'max');\n        }\n    }\n\n    render() {\n        console.log(\"==> App render\");\n        // Get list of portfolios from appData\n        const appData = this.state.appData;\n        let portfolios = [];\n        for (let portfolioName in appData) {\n            if (appData.hasOwnProperty(portfolioName)) {\n                portfolios.push(portfolioName);\n            }\n        }\n\n        // Render portfolios and 'add portfolio' button\n        return (\n            <div className=\"App\">\n                <h1>SPMS</h1>\n                <a href=\"https://iexcloud.io\">Data provided by IEX Cloud</a>\n                <p>15 minute delay in price</p>\n                <AddPortfolioButton />\n                {portfolios.map(portfolioName =>\n                    // Pass portfolio name and portfolio data to the portfolio\n                    <Portfolio key={portfolioName} name={portfolioName} portfolio={appData[portfolioName]} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}